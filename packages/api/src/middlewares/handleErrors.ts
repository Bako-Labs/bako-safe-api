/* eslint-disable @typescript-eslint/no-unused-vars */
import type Express from 'express';
import type { ExpressJoiError } from 'express-joi-validation';

import GeneralError from '@utils/error/GeneralError';

enum ErrorTypes {
  App = 'app',
  Unknown = 'unknown',
}

const handleErrors = (
  err: GeneralError | ExpressJoiError,
  _req: Express.Request,
  res: Express.Response,
  _next: Express.NextFunction,
) => {
  /**
   * Error generated by our API
   */
  if (err instanceof GeneralError) {
    return res.status(err.statusCode).json({
      origin: ErrorTypes.App,
      errors: err.error,
    });
  }

  /**
   * Payload/query/header (Joi) validation handler
   */
  if (err?.type) {
    return res.status(400).json({
      origin: err.type,
      errors: err.error.details.map((joiDetail) => ({
        type: joiDetail.type,
        title: joiDetail.message,
        detail: joiDetail.message,
      })),
    });
  }

  /**
   * Unknown error (can be anything)
   */
  return res.status(500).json({
    origin: ErrorTypes.Unknown,
    errors: [err],
  });
};

export { handleErrors };
