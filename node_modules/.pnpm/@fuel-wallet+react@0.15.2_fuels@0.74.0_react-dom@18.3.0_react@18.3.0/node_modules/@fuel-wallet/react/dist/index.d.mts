import * as _tanstack_react_query from '@tanstack/react-query';
import * as fuels from 'fuels';
import { BytesLike, ChainInfo, TransactionResultReceipt } from 'fuels';
import * as _fuel_wallet_sdk from '@fuel-wallet/sdk';
import { Asset, Fuel, FuelConnector, FuelConfig } from '@fuel-wallet/sdk';
import * as react_jsx_runtime from 'react/jsx-runtime';
import { ReactNode } from 'react';

declare const useAccount: () => {
    error: unknown;
    isError: true;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: true;
    isSuccess: false;
    status: "error";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: unknown;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isPreviousData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<string | null, unknown>>;
    remove: () => void;
    fetchStatus: _tanstack_react_query.FetchStatus;
    account: string | null;
} | {
    error: null;
    isError: false;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: true;
    status: "success";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: unknown;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isPreviousData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<string | null, unknown>>;
    remove: () => void;
    fetchStatus: _tanstack_react_query.FetchStatus;
    account: string | null;
};

declare const useAccounts: () => {
    error: unknown;
    isError: true;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: true;
    isSuccess: false;
    status: "error";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: unknown;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isPreviousData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<string[], unknown>>;
    remove: () => void;
    fetchStatus: _tanstack_react_query.FetchStatus;
    accounts: string[];
} | {
    error: null;
    isError: false;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: true;
    status: "success";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: unknown;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isPreviousData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<string[], unknown>>;
    remove: () => void;
    fetchStatus: _tanstack_react_query.FetchStatus;
    accounts: string[];
};

declare const useBalance: ({ address, assetId, }: {
    address?: string | undefined;
    assetId?: BytesLike | undefined;
}) => {
    data: fuels.BN | null;
    error: unknown;
    isError: true;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: true;
    isSuccess: false;
    status: "error";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: unknown;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isPreviousData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<fuels.BN | null, unknown>>;
    remove: () => void;
    fetchStatus: _tanstack_react_query.FetchStatus;
    balance: fuels.BN | null;
} | {
    data: fuels.BN | null;
    error: null;
    isError: false;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: true;
    status: "success";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: unknown;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isPreviousData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<fuels.BN | null, unknown>>;
    remove: () => void;
    fetchStatus: _tanstack_react_query.FetchStatus;
    balance: fuels.BN | null;
};

declare const useChain: () => {
    data: ChainInfo | null;
    error: unknown;
    isError: true;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: true;
    isSuccess: false;
    status: "error";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: unknown;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isPreviousData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<ChainInfo | null, unknown>>;
    remove: () => void;
    fetchStatus: _tanstack_react_query.FetchStatus;
    chain: ChainInfo | null;
} | {
    data: ChainInfo | null;
    error: null;
    isError: false;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: true;
    status: "success";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: unknown;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isPreviousData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<ChainInfo | null, unknown>>;
    remove: () => void;
    fetchStatus: _tanstack_react_query.FetchStatus;
    chain: ChainInfo | null;
};

declare const useAssets: () => {
    error: unknown;
    isError: true;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: true;
    isSuccess: false;
    status: "error";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: unknown;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isPreviousData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Asset[], unknown>>;
    remove: () => void;
    fetchStatus: _tanstack_react_query.FetchStatus;
    assets: Asset[];
} | {
    error: null;
    isError: false;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: true;
    status: "success";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: unknown;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isPreviousData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<Asset[], unknown>>;
    remove: () => void;
    fetchStatus: _tanstack_react_query.FetchStatus;
    assets: Asset[];
};

declare const useAddNetwork: () => {
    data: undefined;
    error: null;
    isError: false;
    isIdle: true;
    isLoading: false;
    isSuccess: false;
    status: "idle";
    reset: () => void;
    context: unknown;
    failureCount: number;
    failureReason: unknown;
    isPaused: boolean;
    variables: string | undefined;
    addNetwork: (networkUrl: string) => void;
    addNetworkAsync: (networkUrl: string) => Promise<boolean>;
} | {
    data: undefined;
    error: null;
    isError: false;
    isIdle: false;
    isLoading: true;
    isSuccess: false;
    status: "loading";
    reset: () => void;
    context: unknown;
    failureCount: number;
    failureReason: unknown;
    isPaused: boolean;
    variables: string | undefined;
    addNetwork: (networkUrl: string) => void;
    addNetworkAsync: (networkUrl: string) => Promise<boolean>;
} | {
    data: undefined;
    error: unknown;
    isError: true;
    isIdle: false;
    isLoading: false;
    isSuccess: false;
    status: "error";
    reset: () => void;
    context: unknown;
    failureCount: number;
    failureReason: unknown;
    isPaused: boolean;
    variables: string | undefined;
    addNetwork: (networkUrl: string) => void;
    addNetworkAsync: (networkUrl: string) => Promise<boolean>;
} | {
    data: boolean;
    error: null;
    isError: false;
    isIdle: false;
    isLoading: false;
    isSuccess: true;
    status: "success";
    reset: () => void;
    context: unknown;
    failureCount: number;
    failureReason: unknown;
    isPaused: boolean;
    variables: string | undefined;
    addNetwork: (networkUrl: string) => void;
    addNetworkAsync: (networkUrl: string) => Promise<boolean>;
};

declare const useNetwork: () => {
    error: unknown;
    isError: true;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: true;
    isSuccess: false;
    status: "error";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: unknown;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isPreviousData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<_fuel_wallet_sdk.Network, unknown>>;
    remove: () => void;
    fetchStatus: _tanstack_react_query.FetchStatus;
    network: _fuel_wallet_sdk.Network | undefined;
} | {
    error: null;
    isError: false;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: true;
    status: "success";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: unknown;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isPreviousData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<_fuel_wallet_sdk.Network, unknown>>;
    remove: () => void;
    fetchStatus: _tanstack_react_query.FetchStatus;
    network: _fuel_wallet_sdk.Network | undefined;
} | {
    error: unknown;
    isError: true;
    isLoading: false;
    isLoadingError: true;
    isRefetchError: false;
    isSuccess: false;
    status: "error";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: unknown;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isPreviousData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<_fuel_wallet_sdk.Network, unknown>>;
    remove: () => void;
    fetchStatus: _tanstack_react_query.FetchStatus;
    network: _fuel_wallet_sdk.Network | undefined;
} | {
    error: null;
    isError: false;
    isLoading: true;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: false;
    status: "loading";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: unknown;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isPreviousData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<_fuel_wallet_sdk.Network, unknown>>;
    remove: () => void;
    fetchStatus: _tanstack_react_query.FetchStatus;
    network: _fuel_wallet_sdk.Network | undefined;
};

declare const useAddAssets: () => {
    data: undefined;
    error: null;
    isError: false;
    isIdle: true;
    isLoading: false;
    isSuccess: false;
    status: "idle";
    reset: () => void;
    context: unknown;
    failureCount: number;
    failureReason: unknown;
    isPaused: boolean;
    variables: Asset | Asset[] | undefined;
    addAssets: (assets: Asset | Asset[]) => void;
    addAssetsAsync: (assets: Asset | Asset[]) => Promise<boolean>;
} | {
    data: undefined;
    error: null;
    isError: false;
    isIdle: false;
    isLoading: true;
    isSuccess: false;
    status: "loading";
    reset: () => void;
    context: unknown;
    failureCount: number;
    failureReason: unknown;
    isPaused: boolean;
    variables: Asset | Asset[] | undefined;
    addAssets: (assets: Asset | Asset[]) => void;
    addAssetsAsync: (assets: Asset | Asset[]) => Promise<boolean>;
} | {
    data: undefined;
    error: unknown;
    isError: true;
    isIdle: false;
    isLoading: false;
    isSuccess: false;
    status: "error";
    reset: () => void;
    context: unknown;
    failureCount: number;
    failureReason: unknown;
    isPaused: boolean;
    variables: Asset | Asset[] | undefined;
    addAssets: (assets: Asset | Asset[]) => void;
    addAssetsAsync: (assets: Asset | Asset[]) => Promise<boolean>;
} | {
    data: boolean;
    error: null;
    isError: false;
    isIdle: false;
    isLoading: false;
    isSuccess: true;
    status: "success";
    reset: () => void;
    context: unknown;
    failureCount: number;
    failureReason: unknown;
    isPaused: boolean;
    variables: Asset | Asset[] | undefined;
    addAssets: (assets: Asset | Asset[]) => void;
    addAssetsAsync: (assets: Asset | Asset[]) => Promise<boolean>;
};

declare const useConnect: () => {
    data: undefined;
    error: null;
    isError: false;
    isIdle: true;
    isLoading: false;
    isSuccess: false;
    status: "idle";
    reset: () => void;
    context: unknown;
    failureCount: number;
    failureReason: unknown;
    isPaused: boolean;
    variables: string | null | undefined;
    connect: (connectorName?: string | null) => void;
    connectAsync: (connectorName?: string | null) => Promise<boolean>;
} | {
    data: undefined;
    error: null;
    isError: false;
    isIdle: false;
    isLoading: true;
    isSuccess: false;
    status: "loading";
    reset: () => void;
    context: unknown;
    failureCount: number;
    failureReason: unknown;
    isPaused: boolean;
    variables: string | null | undefined;
    connect: (connectorName?: string | null) => void;
    connectAsync: (connectorName?: string | null) => Promise<boolean>;
} | {
    data: undefined;
    error: unknown;
    isError: true;
    isIdle: false;
    isLoading: false;
    isSuccess: false;
    status: "error";
    reset: () => void;
    context: unknown;
    failureCount: number;
    failureReason: unknown;
    isPaused: boolean;
    variables: string | null | undefined;
    connect: (connectorName?: string | null) => void;
    connectAsync: (connectorName?: string | null) => Promise<boolean>;
} | {
    data: boolean;
    error: null;
    isError: false;
    isIdle: false;
    isLoading: false;
    isSuccess: true;
    status: "success";
    reset: () => void;
    context: unknown;
    failureCount: number;
    failureReason: unknown;
    isPaused: boolean;
    variables: string | null | undefined;
    connect: (connectorName?: string | null) => void;
    connectAsync: (connectorName?: string | null) => Promise<boolean>;
};

declare const useConnectors: () => {
    data: _fuel_wallet_sdk.FuelConnector[];
    error: unknown;
    isError: true;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: true;
    isSuccess: false;
    status: "error";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: unknown;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isPreviousData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<_fuel_wallet_sdk.FuelConnector[], unknown>>;
    remove: () => void;
    fetchStatus: _tanstack_react_query.FetchStatus;
    connectors: _fuel_wallet_sdk.FuelConnector[];
} | {
    data: _fuel_wallet_sdk.FuelConnector[];
    error: null;
    isError: false;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: true;
    status: "success";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: unknown;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isPreviousData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<_fuel_wallet_sdk.FuelConnector[], unknown>>;
    remove: () => void;
    fetchStatus: _tanstack_react_query.FetchStatus;
    connectors: _fuel_wallet_sdk.FuelConnector[];
};

declare const useDisconnect: () => {
    data: undefined;
    error: null;
    isError: false;
    isIdle: true;
    isLoading: false;
    isSuccess: false;
    status: "idle";
    reset: () => void;
    context: unknown;
    failureCount: number;
    failureReason: unknown;
    isPaused: boolean;
    variables: void | undefined;
    disconnect: _tanstack_react_query.UseMutateFunction<boolean, unknown, void, unknown>;
    disconnectAsync: _tanstack_react_query.UseMutateAsyncFunction<boolean, unknown, void, unknown>;
} | {
    data: undefined;
    error: null;
    isError: false;
    isIdle: false;
    isLoading: true;
    isSuccess: false;
    status: "loading";
    reset: () => void;
    context: unknown;
    failureCount: number;
    failureReason: unknown;
    isPaused: boolean;
    variables: void | undefined;
    disconnect: _tanstack_react_query.UseMutateFunction<boolean, unknown, void, unknown>;
    disconnectAsync: _tanstack_react_query.UseMutateAsyncFunction<boolean, unknown, void, unknown>;
} | {
    data: undefined;
    error: unknown;
    isError: true;
    isIdle: false;
    isLoading: false;
    isSuccess: false;
    status: "error";
    reset: () => void;
    context: unknown;
    failureCount: number;
    failureReason: unknown;
    isPaused: boolean;
    variables: void | undefined;
    disconnect: _tanstack_react_query.UseMutateFunction<boolean, unknown, void, unknown>;
    disconnectAsync: _tanstack_react_query.UseMutateAsyncFunction<boolean, unknown, void, unknown>;
} | {
    data: boolean;
    error: null;
    isError: false;
    isIdle: false;
    isLoading: false;
    isSuccess: true;
    status: "success";
    reset: () => void;
    context: unknown;
    failureCount: number;
    failureReason: unknown;
    isPaused: boolean;
    variables: void | undefined;
    disconnect: _tanstack_react_query.UseMutateFunction<boolean, unknown, void, unknown>;
    disconnectAsync: _tanstack_react_query.UseMutateAsyncFunction<boolean, unknown, void, unknown>;
};

declare const useIsConnected: () => {
    error: unknown;
    isError: true;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: true;
    isSuccess: false;
    status: "error";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: unknown;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isPreviousData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<boolean | null, unknown>>;
    remove: () => void;
    fetchStatus: _tanstack_react_query.FetchStatus;
    isConnected: boolean | null;
} | {
    error: null;
    isError: false;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: true;
    status: "success";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: unknown;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isPreviousData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<boolean | null, unknown>>;
    remove: () => void;
    fetchStatus: _tanstack_react_query.FetchStatus;
    isConnected: boolean | null;
};

type NodeInfoParams = {
    version?: string;
};
declare const useNodeInfo: ({ version }?: NodeInfoParams) => {
    error: unknown;
    isError: true;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: true;
    isSuccess: false;
    status: "error";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: unknown;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isPreviousData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<fuels.NodeInfo | undefined, unknown>>;
    remove: () => void;
    fetchStatus: _tanstack_react_query.FetchStatus;
    isCompatible: boolean | null;
    nodeInfo: fuels.NodeInfo | undefined;
} | {
    error: null;
    isError: false;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: true;
    status: "success";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: unknown;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isPreviousData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<fuels.NodeInfo | undefined, unknown>>;
    remove: () => void;
    fetchStatus: _tanstack_react_query.FetchStatus;
    isCompatible: boolean | null;
    nodeInfo: fuels.NodeInfo | undefined;
} | {
    error: unknown;
    isError: true;
    isLoading: false;
    isLoadingError: true;
    isRefetchError: false;
    isSuccess: false;
    status: "error";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: unknown;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isPreviousData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<fuels.NodeInfo | undefined, unknown>>;
    remove: () => void;
    fetchStatus: _tanstack_react_query.FetchStatus;
    isCompatible: boolean | null;
    nodeInfo: fuels.NodeInfo | undefined;
} | {
    error: null;
    isError: false;
    isLoading: true;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: false;
    status: "loading";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: unknown;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isPreviousData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<fuels.NodeInfo | undefined, unknown>>;
    remove: () => void;
    fetchStatus: _tanstack_react_query.FetchStatus;
    isCompatible: boolean | null;
    nodeInfo: fuels.NodeInfo | undefined;
};

declare const useProvider: () => {
    error: unknown;
    isError: true;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: true;
    isSuccess: false;
    status: "error";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: unknown;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isPreviousData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<_fuel_wallet_sdk.FuelWalletProvider | null, unknown>>;
    remove: () => void;
    fetchStatus: _tanstack_react_query.FetchStatus;
    provider: _fuel_wallet_sdk.FuelWalletProvider | null;
} | {
    error: null;
    isError: false;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: true;
    status: "success";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: unknown;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isPreviousData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<_fuel_wallet_sdk.FuelWalletProvider | null, unknown>>;
    remove: () => void;
    fetchStatus: _tanstack_react_query.FetchStatus;
    provider: _fuel_wallet_sdk.FuelWalletProvider | null;
};

declare const useTransaction: (txId?: string) => {
    error: unknown;
    isError: true;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: true;
    isSuccess: false;
    status: "error";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: unknown;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isPreviousData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<(Partial<Omit<fuels.TransactionScript, "type">> & Partial<Omit<fuels.TransactionCreate, "type">> & Partial<Omit<fuels.TransactionMint, "type">> & {
        type: fuels.TransactionType;
    }) | null, unknown>>;
    remove: () => void;
    fetchStatus: _tanstack_react_query.FetchStatus;
    transaction: (Partial<Omit<fuels.TransactionScript, "type">> & Partial<Omit<fuels.TransactionCreate, "type">> & Partial<Omit<fuels.TransactionMint, "type">> & {
        type: fuels.TransactionType;
    }) | null;
} | {
    error: null;
    isError: false;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: true;
    status: "success";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: unknown;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isPreviousData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<(Partial<Omit<fuels.TransactionScript, "type">> & Partial<Omit<fuels.TransactionCreate, "type">> & Partial<Omit<fuels.TransactionMint, "type">> & {
        type: fuels.TransactionType;
    }) | null, unknown>>;
    remove: () => void;
    fetchStatus: _tanstack_react_query.FetchStatus;
    transaction: (Partial<Omit<fuels.TransactionScript, "type">> & Partial<Omit<fuels.TransactionCreate, "type">> & Partial<Omit<fuels.TransactionMint, "type">> & {
        type: fuels.TransactionType;
    }) | null;
};

declare const useTransactionReceipts: ({ txId }: {
    txId?: string | undefined;
}) => {
    error: unknown;
    isError: true;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: true;
    isSuccess: false;
    status: "error";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: unknown;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isPreviousData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<TransactionResultReceipt[] | null, unknown>>;
    remove: () => void;
    fetchStatus: _tanstack_react_query.FetchStatus;
    transactionReceipts: TransactionResultReceipt[] | null;
} | {
    error: null;
    isError: false;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: true;
    status: "success";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: unknown;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isPreviousData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<TransactionResultReceipt[] | null, unknown>>;
    remove: () => void;
    fetchStatus: _tanstack_react_query.FetchStatus;
    transactionReceipts: TransactionResultReceipt[] | null;
};

declare const useWallet: (address?: string | null) => {
    error: unknown;
    isError: true;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: true;
    isSuccess: false;
    status: "error";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: unknown;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isPreviousData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<_fuel_wallet_sdk.FuelWalletLocked | null, unknown>>;
    remove: () => void;
    fetchStatus: _tanstack_react_query.FetchStatus;
    wallet: _fuel_wallet_sdk.FuelWalletLocked | null | undefined;
} | {
    error: null;
    isError: false;
    isLoading: false;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: true;
    status: "success";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: unknown;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isPreviousData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<_fuel_wallet_sdk.FuelWalletLocked | null, unknown>>;
    remove: () => void;
    fetchStatus: _tanstack_react_query.FetchStatus;
    wallet: _fuel_wallet_sdk.FuelWalletLocked | null | undefined;
} | {
    error: unknown;
    isError: true;
    isLoading: false;
    isLoadingError: true;
    isRefetchError: false;
    isSuccess: false;
    status: "error";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: unknown;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isPreviousData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<_fuel_wallet_sdk.FuelWalletLocked | null, unknown>>;
    remove: () => void;
    fetchStatus: _tanstack_react_query.FetchStatus;
    wallet: _fuel_wallet_sdk.FuelWalletLocked | null | undefined;
} | {
    error: null;
    isError: false;
    isLoading: true;
    isLoadingError: false;
    isRefetchError: false;
    isSuccess: false;
    status: "loading";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: unknown;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isPreviousData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: <TPageData>(options?: (_tanstack_react_query.RefetchOptions & _tanstack_react_query.RefetchQueryFilters<TPageData>) | undefined) => Promise<_tanstack_react_query.QueryObserverResult<_fuel_wallet_sdk.FuelWalletLocked | null, unknown>>;
    remove: () => void;
    fetchStatus: _tanstack_react_query.FetchStatus;
    wallet: _fuel_wallet_sdk.FuelWalletLocked | null | undefined;
};

declare const QUERY_KEYS: {
    account: string;
    accounts: string;
    assets: string;
    chain: string;
    isConnected: string;
    provider: string;
    balance: string;
    wallet: string;
    transaction: string;
    transactionReceipts: string;
    nodeInfo: string;
    connectorList: string;
    currentConnector: string;
    currentNetwork: string;
};
declare const MUTATION_KEYS: {
    connect: string;
    addAssets: string;
    addNetwork: string;
};

declare function selectCurrentConnector(fuel: Fuel, connectors: Array<FuelConnector>): Promise<boolean> | undefined;

type Connector = {
    name: string;
    image: string | {
        light: string;
        dark: string;
    };
    connector: string;
    install: {
        action: string;
        link: string;
        description: string;
    };
    installed: boolean;
};
type ConnectorList = Array<Connector>;

type FuelUIProviderProps = {
    children?: ReactNode;
    theme?: string;
};
type FuelUIContextType = {
    theme: string;
    connectors: Array<FuelConnector>;
    isLoading: boolean;
    isConnecting: boolean;
    isError: boolean;
    connect: () => void;
    cancel: () => void;
    setTheme: (theme: string) => void;
    error: Error | null;
    dialog: {
        connector: FuelConnector | null;
        isOpen: boolean;
        back: () => void;
        connect: (connector: FuelConnector) => void;
    };
};
declare const useConnectUI: () => FuelUIContextType;

type FuelReactContextType = {
    fuel: Fuel;
};
declare const useFuel: () => FuelReactContextType;

type FuelProviderProps = {
    ui?: boolean;
    fuelConfig?: FuelConfig;
} & FuelUIProviderProps;
declare function FuelProvider({ theme, children, fuelConfig, ui, }: FuelProviderProps): react_jsx_runtime.JSX.Element;

export { Connector, ConnectorList, FuelProvider, MUTATION_KEYS, QUERY_KEYS, selectCurrentConnector, useAccount, useAccounts, useAddAssets, useAddNetwork, useAssets, useBalance, useChain, useConnect, useConnectUI, useConnectors, useDisconnect, useFuel, useIsConnected, useNetwork, useNodeInfo, useProvider, useTransaction, useTransactionReceipts, useWallet };
