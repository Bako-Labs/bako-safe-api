{"version":3,"sources":["../src/api/auth/auth.ts","../src/api/auth/types.ts","../configurables.ts","../test/mocks/accounts.ts","../test/mocks/assets.ts","../test/mocks/transactions.ts","../src/api/api.ts","../src/api/transactions/transactions.ts","../src/api/transactions/types.ts","../src/api/predicates/predicate.ts","../src/api/utils/pagination.ts","../src/utils/assets/Assets.ts","../src/utils/assets/helpers.ts","../src/modules/transfers/Transfer.ts","../src/modules/transfers/types.ts","../test/utils/delay.ts","../test/utils/provider.ts","../test/utils/rootWallet.ts","../test/utils/sendCoins.ts","../test/utils/signin.ts","../src/modules/transfers/helpers.ts","../src/modules/vault/helpers.ts","../src/modules/vault/types.ts","../src/modules/transfers/ScriptTransaction.ts","../src/modules/vault/Vault.ts","../src/utils/address/Address.ts","../src/sway/predicates/factories/PredicateAbi__factory.ts","../../connector/src/types.ts"],"names":["axios","Provider","Wallet","TypeUser","defaultConfig","gasConfig","unEditable","BakoSafe","params","key","accounts","bn","assets","VALUES_DEFAULT_TO_MUL","DEFAULT_BALANCE_VALUE","DEFAULT_BALANCES","uuidv4","AuthService","_AuthService","address","token","account","provider","pk","client","code","data","wallet","BakoSafeAuthTransactionId","approve","msg","Api","auth","TransactionService","payload","hash","transactionId","BakoSafeTransactionId","signer","SortOption","TransactionStatus","WitnessStatus","TransactionProcessStatus","PredicateService","predicateAddress","predicateId","defaultListParams","Asset","list","acc","asset","assetId","amount","to","_assets","_fee","_assets_aux","value","predicateCoins","coin","assetsList","hexlify","transactionRequestify","TransactionResponse","ECreationTransactiontype","TransferInstanceError","delay","ms","resolve","LocalProvider","rootWallet","txParams","Address","Signer","arrayify","hashMessage","ScriptTransactionRequest","ZeroBytes32","ECreationtype","defaultValues","makeHashPredicate","makeSubscribers","subscribers","array","index","instanceByOldUtil","id","hasId","api","result","instanceByNewUtil","isOldPredicate","param","is","isNewPredicate","validations","configurable","SIGNATURES_COUNT","SIGNERS","identifyCreateVaultParams","oldData","isOld","newData","e","InputType","BakoSafeScriptTransaction","script","gasLimit","gasPrice","transactionScript","_coins","vault","outputs","witnesses","input","recoverSigner","tx_id","a","getHashTxId","chainId","formatTransaction","coins","transactionCoins","script_t","isNewTransaction","transfer","isNew","service","assest","transactionName","scriptTransaction","txData","hashTxId","BakoSafeTransaction","isOldTransaction","transaction","scriptTransactionRequest","witness","isNewTransactionByScript","isSave","isScript","signature","identifyCreateTransactionParams","sData","Transfer","_Transfer","name","transactionRequest","BakoSafeScript","item","block","tx","tx_est","encodedTransaction","Predicate","AddressUtils","add","_abi","_bin","_PredicateAbi__factory","configurables","abi","bin","PredicateAbi__factory","Vault","_Vault","bytecode","description","BakoSafeVaultId","BakoSafeVault","BakoSafeAuth","transactionRecursiveTimeout","_network","_chainId","_configurable","_params","rest","BakoSafeConnectors"],"mappings":"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","sourcesContent":["import axios, { AxiosInstance } from 'axios';\nimport { Provider, Wallet } from 'fuels';\nimport { IAuthService, IBakoSafeAuth, TypeUser } from './types';\n\nimport { FuelWalletLocked } from '@fuel-wallet/sdk';\n\nimport { ITransaction } from '../transactions';\nimport { BakoSafe } from '../../../configurables';\nimport { IAccountKeys, accounts } from '../../../test/mocks';\n\n// woking to local node just fine\nexport class AuthService implements IAuthService {\n  public BakoSafeAuth?: IBakoSafeAuth;\n  public client: AxiosInstance;\n\n  protected constructor({ address, token }: IBakoSafeAuth) {\n    this.BakoSafeAuth = {\n      address,\n      token,\n    };\n    this.client = axios.create({\n      baseURL: BakoSafe.get('SERVER_URL'),\n      headers: {\n        Authorization: token,\n        Signeraddress: address,\n      },\n    });\n  }\n\n  static async create(account: IAccountKeys, provider: string) {\n    const address = accounts[account].address;\n    const pk = accounts[account].privateKey;\n    const client = axios.create({\n      baseURL: BakoSafe.get('SERVER_URL'),\n    });\n    const {\n      data: { code },\n    } = await client.post('/user', { address, provider, type: TypeUser.FUEL });\n\n    if (!code) throw new Error('Account not created');\n\n    const { data } = await client.post('/auth/sign-in', {\n      digest: code,\n      encoder: TypeUser.FUEL,\n      signature: await AuthService.signerByPk(pk, code),\n    });\n\n    return new AuthService({\n      address,\n      token: data.accessToken,\n    });\n  }\n\n  static async signerByPk(pk: string, code: string) {\n    const signer = Wallet.fromPrivateKey(\n      pk,\n      await Provider.create(BakoSafe.get('PROVIDER')),\n    );\n    const msg = await signer.signMessage(code);\n    return msg;\n  }\n\n  static async signerByAccount(wallet: FuelWalletLocked, code: string) {\n    const msg = await wallet.signMessage(code);\n    return msg;\n  }\n\n  async signTransaction(\n    wallet: FuelWalletLocked,\n    BakoSafeAuthTransactionId: string,\n    approve?: boolean,\n  ) {\n    const { data } = await this.client.get<ITransaction>(\n      `/transaction/${BakoSafeAuthTransactionId}`,\n    );\n    const msg = await wallet.signMessage(data.hash);\n\n    await this.client\n      .put(`/transaction/signer/${BakoSafeAuthTransactionId}`, {\n        account: wallet.address.toString(),\n        signer: msg,\n        confirm: approve ?? true,\n      })\n      .then(() => true)\n      .catch(() => false);\n  }\n}\n","export interface IAuthService {}\n\nexport interface IApiConfig {\n  apiUrl: string;\n  authToken?: string;\n  account?: string;\n}\n\nexport enum TypeUser {\n  FUEL = 'FUEL',\n  WEB_AUTHN = 'WEB_AUTHN',\n}\n\nexport interface IBakoSafeAuth {\n  address: string;\n  token: string;\n}\n\nexport interface IBakoSafeAuthPayload {\n  address: string;\n  hash: string;\n  createdAt: string;\n  provider: string;\n  encoder: string;\n  user_id: string;\n}\n","export const defaultConfig = {\n  PROVIDER: 'http://localhost:4000/graphql',\n  SERVER_URL: 'http://localhost:3333/',\n  CLIENT_URL: 'https://safe.bako.global',\n  ENCODER: 'Fuel',\n};\n\nexport const gasConfig = {\n  GAS_PRICE: 1,\n  GAS_LIMIT: 10000,\n};\n\nconst unEditable = ['ENCODER'];\n\nexport type DefaultConfigurables = typeof defaultConfig;\nexport type DefaultConfigurablesKeys = keyof DefaultConfigurables;\nexport type GasConfigurables = typeof gasConfig;\nexport type GasConfigurablesKeys = keyof GasConfigurables;\n\nexport const BakoSafe = {\n  setup: (params: Partial<DefaultConfigurables>) => {\n    const configurableKeys = Object.keys(params);\n\n    configurableKeys.forEach((key) => {\n      if (key in defaultConfig && !unEditable.includes(key)) {\n        // @ts-ignore\n        defaultConfig[key] = params[key]!;\n      }\n    });\n  },\n  setChainConfig: (params: Partial<GasConfigurables>) => {\n    const configurableKeys = Object.keys(params);\n\n    configurableKeys.forEach((key) => {\n      if (key in gasConfig) {\n        // @ts-ignore\n        gasConfig[key] = params[key]!;\n      }\n    });\n  },\n  get: (key: DefaultConfigurablesKeys) => defaultConfig[key],\n  getChainConfig: (key: GasConfigurablesKeys): number => gasConfig[key],\n};\n","// -> valid accounts just to network http://localhost:4000/graphql\nexport const accounts = {\n  FULL: {\n    account:\n      '0x94ffcc53b892684acefaebc8a3d4a595e528a8cf664eeb3ef36f1020b0809d0d',\n    address: 'fuel1jnluc5acjf5y4nh6a0y28499jhjj32x0ve8wk0hndugzpvyqn5xsfsfzly',\n    privateKey:\n      '0xa449b1ffee0e2205fa924c6740cc48b3b473aa28587df6dab12abc245d1f5298',\n  },\n  STORE: {\n    account:\n      '0x53de37ae51fcfecb17ee3589f68904ac75bf5ec109edeb1065ccb63145287da6',\n    address: 'fuel1200r0tj3lnlvk9lwxkyldzgy436m7hkpp8k7kyr9ejmrz3fg0knqndhwm6',\n    privateKey:\n      '0x61a006b78a6e9eb5aeb11df25e6444be281893875ae5fdc5fa4a0f4702995cb7',\n  },\n  USER_1: {\n    account:\n      '0x92dffc873b56f219329ed03bb69bebe8c3d8b041088574882f7a6404f02e2f28',\n    address: 'fuel1jt0lepem2mepjv576qamdxltarpa3vzppzzhfzp00fjqfupw9u5q9gyphu',\n    privateKey:\n      '0xa349d39f614a3085b7f7f8cef63fd5189136924fc1238e6d25ccdaa43a901cd0',\n  },\n  USER_2: {\n    account:\n      '0x456bdaffaf74fe03521754ac445d148033c0c6acf7d593132c43f92fdbc7324c',\n    address: 'fuel1g44a4la0wnlqx5sh2jkyghg5sqeup34v7l2exyevg0ujlk78xfxqr6ywcm',\n    privateKey:\n      '0x139f2cd8db62a9d64c3ed4cdc804f1fb53be98d750cd1432a308b34a42d8dcc7',\n  },\n  USER_3: {\n    account:\n      '0x639880ece7753a32e09164d14dad7436c57737e567f18b98f6ee30fec6b247ec',\n    address: 'fuel1vwvgpm88w5ar9cy3vng5mtt5xmzhwdl9vlcchx8kacc0a34jglkqjnvpjz',\n    privateKey:\n      '0x40aaca08dac67fa0c22b51794f652e20173970cd05a8797f2d3e8393cfc44211',\n  },\n  USER_4: {\n    account:\n      '0xfd8c520ef8caff0ad3289aa64acecd4ef86ac8f643fd9b76bf2d163a86a66716',\n    address: 'fuel1lkx9yrhcetls45egn2ny4nkdfmux4j8kg07eka4l95tr4p4xvutqmvhl2l',\n    privateKey:\n      '0xb58ad4fb072290d03fc2d81cd7534e9bf7360ccad8a48d2799b60bab357255da',\n  },\n  USER_5: {\n    account:\n      '0x8247104854dd733cb475901d55047f57cb3c8cafe3a9f7233de3325b8bf56a5c',\n    address: 'fuel1sfr3qjz5m4enedr4jqw42prl2l9ner90uw5lwgeauve9hzl4dfwqxhyn83',\n    privateKey:\n      '0x4256a670740031e4e7cb7216c9fe8921a4485c187686b7ab0ae7c317d7de0a22',\n  },\n};\n\nexport type IAccountKeys = keyof typeof accounts;\n\nexport type IDefaultAccount = {\n  address: string;\n  account?: string;\n  privateKey?: string;\n};\n","import { bn } from 'fuels';\n\nexport const assets = {\n  ETH: '0x0000000000000000000000000000000000000000000000000000000000000000',\n  DAI: '0x0d9be25f6bef5c945ce44db64b33da9235fbf1a9f690298698d899ad550abae1',\n  sETH: '0x1bdeed96ee1e5eca0bd1d7eeeb51d03b0202c1faf764fec1b276ba27d5d61d89',\n};\n\nexport const VALUES_DEFAULT_TO_MUL = {\n  min: 0.0001,\n  1: 1,\n  2: 2,\n  3: 3,\n  5: 5,\n  10: 10,\n  100: 100,\n};\n\nexport const DEFAULT_BALANCE_VALUE = bn.parseUnits(\n  VALUES_DEFAULT_TO_MUL.min.toString(),\n);\nexport const DEFAULT_BALANCES = [\n  { assetId: assets['ETH'], amount: DEFAULT_BALANCE_VALUE },\n  { assetId: assets['sETH'], amount: DEFAULT_BALANCE_VALUE },\n];\n","import { IFormatTransfer } from '../../src/modules';\nimport { DEFAULT_BALANCES } from './assets';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport const DEFAULT_TRANSACTION_PAYLOAD = (\n  address: string,\n): IFormatTransfer => {\n  return {\n    name: `tx_${uuidv4()}`,\n    assets: DEFAULT_BALANCES.map((balance) => ({\n      assetId: balance.assetId,\n      amount: balance.amount.format(),\n      to: address,\n    })),\n  };\n};\n","import axios, { AxiosInstance } from 'axios';\nimport { IBakoSafeAuth } from './auth/types';\nimport { BakoSafe } from '../../configurables';\n\nexport class Api {\n  public client: AxiosInstance;\n\n  constructor(auth: IBakoSafeAuth) {\n    this.client = axios.create({\n      baseURL: BakoSafe.get('SERVER_URL'),\n      headers: {\n        Authorization: auth.token,\n        Signeraddress: auth.address,\n      },\n    });\n  }\n}\n","import { Api } from '../api';\nimport { IBakoSafeAuth } from '../auth/types';\nimport {\n  ICreateTransactionPayload,\n  ITransaction,\n  ITransactionService,\n} from './types';\n\nexport class TransactionService extends Api implements ITransactionService {\n  constructor(auth: IBakoSafeAuth) {\n    super(auth);\n  }\n\n  public async create(payload: ICreateTransactionPayload) {\n    try {\n      const { data } = await this.client.post<ITransaction>(\n        '/transaction',\n        payload,\n      );\n\n      return data;\n    } catch (e) {\n      throw new Error('ERRO AO CRIAR');\n    }\n  }\n\n  public async findByHash(hash: string) {\n    const { data } = await this.client.get<ITransaction>(\n      `/transaction/by-hash/${hash}`,\n    );\n\n    return data;\n  }\n\n  public async findByTransactionID(transactionId: string) {\n    const { data } = await this.client.get<ITransaction>(\n      `/transaction/${transactionId}`,\n    );\n\n    return data;\n  }\n\n  public async sign(\n    BakoSafeTransactionId: string,\n    account: string,\n    signer: string,\n    approve?: boolean,\n  ) {\n    const { data } = await this.client.put(\n      `/transaction/signer/${BakoSafeTransactionId}`,\n      {\n        account,\n        signer,\n        confirm: approve ?? true,\n      },\n    );\n\n    return data;\n  }\n\n  public async send(BakoSafeTransactionId: string) {\n    const { data } = await this.client.post(\n      `/transaction/send/${BakoSafeTransactionId}`,\n    );\n\n    return data;\n  }\n\n  public async verify(BakoSafeTransactionId: string) {\n    const { data } = await this.client.post(\n      `/transaction/verify/${BakoSafeTransactionId}`,\n    );\n\n    return data;\n  }\n}\n","import { Operation, TransactionRequest } from 'fuels';\nimport { ITransferAsset } from '../../utils/assets';\n\nexport enum SortOption {\n  ASC = 'ASC',\n  DESC = 'DESC',\n}\n\nexport enum TransactionStatus {\n  AWAIT_REQUIREMENTS = 'await_requirements', // -> AWAIT SIGNATURES\n  PENDING_SENDER = 'pending_sender', // -> AWAIT SENDER, BEFORE AWAIT STATUS\n  PROCESS_ON_CHAIN = 'process_on_chain', // -> AWAIT DONE ON CHAIN\n  SUCCESS = 'success', // -> SENDED\n  DECLINED = 'declined', // -> DECLINED\n  FAILED = 'failed', // -> FAILED\n}\n\nexport interface ICreateTransactionPayload {\n  predicateAddress: string; // ADDRESS OF PREDICATE\n  name?: string;\n  hash: string; // HASH OF TRANSACTION\n  txData: TransactionRequest;\n  status: TransactionStatus;\n  assets: ITransferAsset[];\n  sendTime?: Date;\n  gasUsed?: string;\n}\n\nexport enum WitnessStatus {\n  REJECTED = 'REJECTED',\n  DONE = 'DONE',\n  PENDING = 'PENDING',\n}\n\nexport interface IWitnesses {\n  id: string;\n  signature: string;\n  account: string;\n  status: WitnessStatus;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface GetTransactionParams {\n  predicateId?: string[];\n  to?: string;\n  hash?: string;\n  status?: TransactionStatus[];\n  perPage?: number;\n  page?: number;\n  orderBy?: string;\n  sort?: SortOption;\n}\n\nexport enum TransactionProcessStatus {\n  SUCCESS = 'SuccessStatus',\n  SQUIZED = 'SqueezedOutStatus',\n  SUBMITED = 'SubmittedStatus',\n  FAILED = 'FailureStatus',\n}\n\nexport interface ITransactionResume {\n  hash: string;\n  totalSigners: number;\n  requiredSigners: number;\n  predicate: {\n    id: string;\n    address: string;\n  };\n  outputs: ITransferAsset[];\n  status: TransactionStatus;\n  witnesses?: string[];\n  gasUsed?: string;\n  sendTime?: Date;\n}\n\nexport interface ITransactionSummary {\n  origin: string;\n  name: string;\n  image?: string;\n  operations?: Operation[];\n}\n\nexport interface ITransaction extends ICreateTransactionPayload {\n  id: string;\n  name: string;\n  createdAt: string;\n  updatedAt: string;\n  predicateId: string;\n  witnesses: IWitnesses[];\n  resume: ITransactionResume; // RESULT\n  assets: ITransferAsset[];\n  summary?: ITransactionSummary;\n}\n\nexport interface ITransactionService {\n  create: (payload: ICreateTransactionPayload) => Promise<ITransaction>;\n  findByHash: (hash: string) => Promise<ITransaction>;\n  findByTransactionID: (transactionId: string) => Promise<ITransaction>;\n  sign: (\n    BakoSafeTransactionId: string,\n    account: string,\n    signer: string,\n    approve?: boolean,\n  ) => Promise<ITransaction>;\n  send: (BakoSafeTransactionId: string) => Promise<ITransactionResume>;\n  verify: (BakoSafeTransactionId: string) => Promise<ITransactionResume>;\n}\n","import { Api } from '../api';\nimport { IBakoSafeAuth } from '../auth/types';\nimport { GetTransactionParams } from '../transactions';\nimport { IPredicatePayload, IPredicateService } from './types';\n\nexport class PredicateService extends Api implements IPredicateService {\n  constructor(auth: IBakoSafeAuth) {\n    super(auth);\n  }\n\n  public async create(payload: IPredicatePayload) {\n    const { data } = await this.client.post('/predicate', payload);\n\n    return data;\n  }\n\n  public async findByAddress(predicateAddress: string) {\n    const { data } = await this.client.get(\n      `/predicate/by-address/${predicateAddress}`,\n    );\n    return data;\n  }\n\n  public async findById(predicateId: string) {\n    const { data } = await this.client.get(`/predicate/${predicateId}`);\n\n    return data;\n  }\n\n  public async hasReservedCoins(predicateAddress: string) {\n    const { data } = await this.client.get(\n      `/predicate/reserved-coins/${predicateAddress}`,\n    );\n\n    return data;\n  }\n\n  public async listPredicateTransactions(params: GetTransactionParams) {\n    const { data } = await this.client.get('/transaction', {\n      params: {\n        ...params,\n      },\n    });\n\n    return data;\n  }\n}\n","import { SortOption } from '../transactions';\n\nexport interface IPagination<T> {\n  currentPage: number;\n  totalPages: number;\n  nextPage: number;\n  prevPage: number;\n  perPage: number;\n  total: number;\n  data: T[];\n}\n\nexport interface PaginationParams {\n  page: string;\n  perPage: string;\n}\n\nexport const defaultListParams = {\n  perPage: 10,\n  page: 0,\n  orderBy: 'createdAt',\n  sort: SortOption.DESC,\n};\n","import { BN, Coin, Resource, bn } from 'fuels';\nimport { assets } from '../../../test/mocks';\nimport { IAssetGroupById, IAssetGroupByTo, ITransferAsset } from './types';\n\nexport class Asset {\n  /**\n   *  Asset: provides utils to organize assets\n   */\n\n  public static async assetsGroupById(list: ITransferAsset[]) {\n    /**\n     * Groupe assest by id\n     *\n     * @param ITransferAsset[] - An array of assets to transfer.\n     * @returns An object with n unique keys, each key being an asset and the value of each key is equivalent to the sum of the equivalent assets received.\n     */\n    return list.reduce((acc: IAssetGroupById, asset: ITransferAsset) => {\n      const { assetId, amount }: { assetId: string; amount: string } = asset;\n\n      if (!acc[assetId]) {\n        acc[assetId] = bn.parseUnits(amount);\n      } else {\n        acc[assetId] = acc[assetId].add(bn.parseUnits(amount));\n      }\n\n      return acc;\n    }, {});\n  }\n  public static async assetsGroupByTo(list: ITransferAsset[]) {\n    /**\n     * Group assets by transaction destination\n     *\n     * @param ITransferAsset[] - An array of assets to transfer.\n     * @returns An object with n unique keys, each key being a destination address and the value of each key is equivalent to the sum of the equivalent assets received.\n     */\n\n    return list.reduce((acc: IAssetGroupByTo, asset: ITransferAsset) => {\n      const { to, amount, assetId }: ITransferAsset = asset;\n      const key = `${to}${assetId}`;\n      if (!acc[key]) {\n        acc[key] = {\n          assetId,\n          amount: bn.parseUnits(amount),\n          to,\n        };\n      } else {\n        acc[key].amount.add(bn.parseUnits(amount));\n      }\n      return acc;\n    }, {}) as IAssetGroupByTo;\n  }\n\n  public static async addTransactionFee(_assets: IAssetGroupById, _fee: BN) {\n    /**\n     * Checks if there is an eth asset in the transaction to pay for the gas and inserts a minimum amount\n     *\n     * @param _fee - value in BN to add on amount of eth of transaction\n     * @param assets - group of assets to sended of transaction\n     * @returns An object with n unique keys, each key being a destination address and the value of each key is equivalent to the sum of the equivalent assets received.\n     */\n\n    let _assets_aux = _assets;\n    let containETH = !!_assets_aux[assets['ETH']];\n\n    if (containETH) {\n      let value = bn(_fee).add(_assets_aux[assets['ETH']]);\n      _assets_aux[assets['ETH']] = value;\n    } else {\n      _assets_aux[assets['ETH']] = bn().add(_fee);\n    }\n\n    return Object.entries(_assets_aux).map(([key, value]) => {\n      return {\n        amount: value,\n        assetId: key,\n      };\n    });\n  }\n\n  public static includeSpecificAmount(\n    predicateCoins: Resource[],\n    assets: ITransferAsset[],\n  ): ITransferAsset[] {\n    return assets.map((asset: ITransferAsset) => {\n      const predicateCoin: Coin = predicateCoins.find(\n        (coin: Resource) => coin,\n      ) as Coin;\n      if (predicateCoin) {\n        return {\n          ...asset,\n          //utxo: predicateCoin.id,\n        };\n      } else {\n        return {\n          ...asset,\n          onPredicate: '',\n          //utxo: '',\n        };\n      }\n    });\n  }\n}\n","import { assets } from '../../../test/mocks';\nimport { IAsset } from './types';\nconst assetsList: IAsset[] = [\n  {\n    name: 'Etherum',\n    slug: 'ETH',\n    assetId: assets['ETH'],\n  },\n  {\n    name: 'Dai',\n    slug: 'DAI',\n    assetId: assets['DAI'],\n  },\n  {\n    name: 'sEther',\n    slug: 'sETH',\n    assetId: assets['sETH'],\n  },\n];\n\nexport { assetsList };\n","import {\n  bn,\n  hexlify,\n  ScriptTransactionRequest,\n  TransactionRequest,\n  transactionRequestify,\n  TransactionResponse,\n} from 'fuels';\nimport {\n  ITransaction,\n  ITransactionResume,\n  ITransactionService,\n  TransactionStatus,\n} from '../../api';\nimport {\n  ECreationTransactiontype,\n  TransferConstructor,\n  TransferFactory,\n} from './types';\nimport { Vault } from '../vault/Vault';\nimport { delay } from '../../../test/utils';\nimport { identifyCreateTransactionParams } from './helpers';\n\n/**\n * `Transfer` are extension of ScriptTransactionRequest, to create and send transactions\n */\nexport class Transfer {\n  public name!: string;\n  public witnesses: string[];\n  public BakoSafeScript: ScriptTransactionRequest;\n  public BakoSafeTransaction!: ITransaction;\n  public transactionRequest: TransactionRequest;\n  public BakoSafeTransactionId!: string;\n\n  private vault!: Vault;\n  private service?: ITransactionService;\n\n  protected constructor({\n    vault,\n    name,\n    transactionRequest,\n    BakoSafeScript,\n    service,\n    BakoSafeTransaction,\n    BakoSafeTransactionId,\n  }: TransferConstructor) {\n    this.name = name!;\n    this.vault = vault;\n    this.service = service;\n    this.witnesses = [];\n    this.BakoSafeScript = BakoSafeScript;\n    this.transactionRequest = transactionRequest;\n    this.BakoSafeTransaction = BakoSafeTransaction!;\n    this.BakoSafeTransactionId = BakoSafeTransactionId!;\n  }\n\n  /**\n   * Create a new transaction instance\n   *\n   * @param {TransferFactory} param - TransferFactory params\n   *        @param {string | ITransfer | ITransaction} transfer - Transaction ID or ITransfer or ITransaction\n   *        @param {IBakoSafeAuth} auth - BakoSafeAuth instance\n   *        @param {Vault} vault - Vault instance\n   *        @param {boolean} isSave - Save transaction on BakoSafeAPI\n   * @returns return a new Transfer instance\n   */\n  public static async instance(param: TransferFactory) {\n    const item = await identifyCreateTransactionParams(param);\n\n    switch (item.type) {\n      case ECreationTransactiontype.IS_OLD: {\n        const { payload } = item;\n        return new Transfer(payload);\n      }\n      case ECreationTransactiontype.IS_NEW: {\n        const { payload } = item;\n        return new Transfer(payload);\n      }\n      case ECreationTransactiontype.IS_SCRIPT: {\n        const { payload } = item;\n        return new Transfer(payload);\n      }\n      default:\n        throw new Error('Invalid param type to create a transfer');\n    }\n  }\n\n  /**\n   * Create the url to consult the fuel block explorer\n   *\n   * @returns link of transaction block\n   */\n  public makeBlockUrl(block: string | undefined) {\n    return block\n      ? `https://fuellabs.github.io/block-explorer-v2/transaction/${this.getHashTxId()}?providerUrl=${encodeURIComponent(\n          this.vault.provider.url,\n        )}`\n      : '';\n  }\n\n  /**\n   * Generates and formats the transaction hash of transaction instance\n   *\n   * @returns Hash of this transaction\n   */\n  public getHashTxId() {\n    const txHash = this.transactionRequest.getTransactionId(\n      this.vault.provider.getChainId(),\n    );\n    return txHash.slice(2);\n  }\n\n  /**\n   * Configure outputs and parameters of transaction instance.\n   *\n   * @returns this transaction configured and your hash\n   */\n\n  /**\n   * Using BakoSafe auth or default send of predicate, send this transaction to chain\n   *\n   * @returns an resume for transaction\n   */\n  public async send() {\n    if (!this.service) {\n      const tx: TransactionRequest = transactionRequestify(\n        this.BakoSafeScript!,\n      );\n      tx.witnesses = this.witnesses;\n\n      const tx_est = await this.vault.provider.estimatePredicates(tx);\n      const encodedTransaction = hexlify(tx_est.toTransactionBytes());\n      const {\n        submit: { id: transactionId },\n      } = await this.vault.provider.operations.submit({ encodedTransaction });\n      return new TransactionResponse(transactionId, this.vault.provider);\n    }\n\n    this.BakoSafeTransaction = await this.service.findByTransactionID(\n      this.BakoSafeTransactionId,\n    );\n    switch (this.BakoSafeTransaction.status) {\n      case TransactionStatus.PENDING_SENDER:\n        await this.service.send(this.BakoSafeTransactionId);\n        break;\n\n      case TransactionStatus.PROCESS_ON_CHAIN:\n        return await this.wait();\n\n      case TransactionStatus.FAILED || TransactionStatus.SUCCESS:\n        break;\n\n      default:\n        break;\n    }\n    return {\n      ...this.BakoSafeTransaction.resume,\n      BakoSafeID: this.BakoSafeTransactionId,\n    };\n  }\n\n  /**\n   * Promise to return result of function\n   *\n   * todo: monitore send with an socket server\n   * Connect to api socket using name: [TRANSACTION_WAIT]:${transactionId}\n   * Await an message on event [TRANSACTION_WAIT]:${transactionId}\n   * and resolves a promise returns a result (returned on content of message)\n   *\n   * @returns an resume for transaction\n   */\n  public async wait() {\n    if (!this.service) {\n      throw Error('Implement this.');\n    }\n\n    let transaction = await this.service.findByTransactionID(\n      this.BakoSafeTransactionId,\n    );\n    while (\n      transaction.status !== TransactionStatus.SUCCESS &&\n      transaction.status !== TransactionStatus.FAILED\n    ) {\n      await delay(this.vault.transactionRecursiveTimeout); // todo: make time to dynamic\n      transaction = await this.service.findByTransactionID(\n        this.BakoSafeTransactionId,\n      );\n\n      if (transaction.status == TransactionStatus.PENDING_SENDER)\n        await this.send();\n\n      if (transaction.status == TransactionStatus.PROCESS_ON_CHAIN)\n        await this.service.verify(this.BakoSafeTransactionId);\n    }\n\n    const result: ITransactionResume = {\n      ...transaction.resume,\n      status: transaction.status,\n    };\n    return result;\n  }\n}\n","import {\n  ScriptTransactionRequest,\n  TransactionRequest,\n  TransactionRequestLike,\n  TransactionStatus,\n} from 'fuels';\nimport { ITransferAsset } from '../../utils/assets/types';\nimport {\n  ITransaction,\n  ITransactionResume,\n  ITransactionService,\n  IWitnesses,\n} from '../../api/transactions';\nimport { Vault } from '../vault';\nimport { IBakoSafeAuth } from '../../api';\n\nexport interface TransferConstructor {\n  name: string;\n  service?: ITransactionService;\n  witnesses: string[];\n  transactionRequest: TransactionRequest;\n  BakoSafeScript: ScriptTransactionRequest;\n  BakoSafeTransaction?: ITransaction;\n  BakoSafeTransactionId?: string;\n  vault: Vault;\n}\n\nexport enum ECreationTransactiontype {\n  IS_OLD = 'IS_OLD',\n  IS_NEW = 'IS_NEW',\n  IS_SCRIPT = 'IS_SCRIPT',\n}\n\nexport interface ICreationOldTransfer {\n  type: ECreationTransactiontype.IS_NEW;\n  payload: TransferConstructor;\n}\n\nexport interface ICreationNewTransfer {\n  type: ECreationTransactiontype.IS_OLD;\n  payload: TransferConstructor;\n}\n\nexport interface ICreationScriptTransfer {\n  type: ECreationTransactiontype.IS_SCRIPT;\n  payload: TransferConstructor;\n}\n\nexport type ICreationTransaction =\n  | ICreationOldTransfer\n  | ICreationNewTransfer\n  | ICreationScriptTransfer;\n\nexport type TransferFactoryParam =\n  | string // id e txhash\n  | IFormatTransfer // payload\n  | TransactionRequestLike // request like formatado da fuel\n  | ITransaction;\n\nexport interface TransferFactory {\n  auth?: IBakoSafeAuth;\n  transfer: TransferFactoryParam;\n  vault: Vault;\n  isSave?: boolean;\n}\n\nexport interface IPayloadTransfer {\n  assets: ITransferAsset[];\n  witnesses?: string[];\n  name?: string;\n}\n\nexport interface IFormatTransfer {\n  name: string;\n  assets: ITransferAsset[];\n  witnesses?: string[];\n}\n\nexport interface IInstanceTransfer {\n  txData: TransactionRequest;\n  hash: string;\n}\n\nexport interface IRequiredWitnesses {\n  required: number;\n  signed: number;\n  witnesses: IWitnesses[];\n}\n\nexport interface ITransferResult {\n  status: TransactionStatus;\n  block?: string;\n  witnesses?: string[];\n  outputs?: ITransferAsset[];\n  BakoSafeID?: string;\n  fee?: string;\n  gasUsed?: string;\n}\n\nexport interface ISendTransaction {\n  status: string;\n  block: string;\n  gasUsed: string;\n}\n\nexport enum TransferInstanceError {\n  REQUIRED_AUTH = 'Required credentials',\n  INVALID_PARAMETER = 'Invalid instance parameters',\n}\n\nexport interface ITransfer {\n  send(): void;\n  getScript(): TransactionRequest;\n  wait(): Promise<ITransactionResume | undefined>;\n  getAssets(): ITransferAsset[];\n}\n","export const delay = (ms: number): Promise<void> => {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n};\n","import { BakoSafe } from '../../configurables';\nimport { Provider } from 'fuels';\n\nexport class LocalProvider extends Provider {\n  constructor() {\n    super(BakoSafe.get('PROVIDER'));\n  }\n}\n","import { Wallet } from 'fuels';\nimport { accounts } from '../mocks/accounts';\nimport { LocalProvider } from './provider';\n\nexport const rootWallet = Wallet.fromPrivateKey(\n  accounts['FULL'].privateKey,\n  new LocalProvider(),\n);\n","import { BN, WalletUnlocked, bn } from 'fuels';\nimport { BakoSafe } from '../../configurables';\nimport { assets } from '../mocks';\nimport { Vault } from '../../src/modules/vault/Vault';\n\nexport const txParams = {\n  gasPrice: bn(BakoSafe.getChainConfig('GAS_PRICE')),\n  gasLimit: bn(BakoSafe.getChainConfig('GAS_LIMIT')),\n};\n\nexport const sendPredicateCoins = async (\n  predicate: Vault,\n  amount: BN,\n  asset: 'ETH' | 'DAI' | 'sETH',\n  rootWallet: WalletUnlocked,\n) => {\n  const deposit = await rootWallet.transfer(\n    predicate.address.toString(),\n    amount,\n    assets[asset],\n    txParams,\n  );\n\n  return await deposit.waitForResult();\n};\n","import { Wallet, Address } from 'fuels';\nimport { IBakoSafeAuth, TransactionService } from '../../src/api';\n\nimport { accounts } from '../mocks';\nimport { LocalProvider } from './provider';\n\nexport const signin = async (\n  tx_hash: string,\n  account: 'FULL' | 'USER_1' | 'USER_2' | 'USER_3' | 'USER_4' | 'USER_5',\n  auth?: IBakoSafeAuth,\n  BakoSafeTransactionId?: string,\n) => {\n  const fuelProvider = new LocalProvider();\n\n  const signer = Wallet.fromPrivateKey(\n    accounts[account].privateKey,\n    fuelProvider,\n  );\n  const tx = await signer.signMessage(tx_hash);\n  if (!!auth && BakoSafeTransactionId) {\n    const acc = Address.fromString(accounts[account].address).toString();\n    const serviceTransactions = new TransactionService(auth);\n    return await serviceTransactions.sign(BakoSafeTransactionId, acc, tx);\n  }\n  return tx;\n};\n","import {\n  Signer,\n  TransactionRequestLike,\n  arrayify,\n  hashMessage,\n  transactionRequestify,\n  bn,\n  ScriptTransactionRequest,\n} from 'fuels';\nimport { defaultValues } from '../vault/helpers';\nimport { ITransaction, TransactionService, TransactionStatus } from '../../api';\nimport {\n  ECreationTransactiontype,\n  ICreationTransaction,\n  IFormatTransfer,\n  TransferConstructor,\n  TransferFactory,\n  TransferInstanceError,\n} from './types';\nimport { Vault } from '../vault/Vault';\nimport { Asset } from '../../utils/assets';\nimport { BakoSafe } from '../../../configurables';\nimport { BakoSafeScriptTransaction } from './ScriptTransaction';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport const transactionScript = arrayify(\n  '0x9000000447000000000000000000003c5dfcc00110fff3001a485000910000201a440000724000202849140072400020340004902400000047000000',\n); // TODO: MAKE IT DYNAMIC, Create a default script for the BakoSafe transactions\n\nexport function recoverSigner(signer: string, tx_id: string) {\n  if (tx_id == '0x') return;\n\n  const a = Signer.recoverAddress(hashMessage(tx_id), signer);\n  return a ? a.toString() : defaultValues['address'];\n}\nexport const getHashTxId = (\n  script: TransactionRequestLike,\n  chainId: number,\n) => {\n  const txHash = transactionRequestify(script).getTransactionId(chainId);\n  return txHash.slice(2);\n};\n\nexport const formatTransaction = async ({\n  vault,\n  assets,\n  witnesses,\n}: IFormatTransfer & { vault: Vault }) => {\n  const outputs = await Asset.assetsGroupByTo(assets);\n  const coins = await Asset.assetsGroupById(assets);\n  const transactionCoins = await Asset.addTransactionFee(\n    coins,\n    bn(BakoSafe.getChainConfig('GAS_PRICE')),\n  );\n\n  const _coins = await vault.getResourcesToSpend(transactionCoins);\n\n  const script_t = new BakoSafeScriptTransaction();\n  await script_t.instanceTransaction(_coins, vault, outputs, witnesses);\n\n  return script_t;\n};\n\nexport const isNewTransaction = async ({\n  transfer,\n  auth,\n  vault,\n}: TransferFactory) => {\n  const validation =\n    transfer &&\n    Object.entries(transfer).length <= 3 &&\n    Object.entries(transfer).length > 0 &&\n    typeof transfer != 'string' &&\n    'assets' in transfer &&\n    !!vault;\n  const isNew = validation;\n\n  if (isNew) {\n    const { assets: _assets } = transfer;\n    const service = auth && new TransactionService(auth);\n    const assets = _assets.map((assest) => ({\n      assetId: assest.assetId,\n      amount: assest.amount.toString(),\n      to: assest.to,\n    }));\n\n    const transactionName = `tx_${uuidv4()}`;\n    const scriptTransaction = await formatTransaction({\n      name: transfer.name ? transfer.name : transactionName,\n      vault: vault,\n      assets: assets,\n    });\n\n    const txData = transactionRequestify(scriptTransaction);\n    const hashTxId = getHashTxId(txData, vault.provider.getChainId());\n\n    const BakoSafeTransaction =\n      auth &&\n      service &&\n      (await service.create({\n        assets,\n        hash: hashTxId,\n        txData: txData,\n        name: transfer.name ?? transactionName,\n        status: TransactionStatus.AWAIT_REQUIREMENTS,\n        predicateAddress: vault.address.toString(),\n      }));\n\n    const data = {\n      vault,\n      service,\n      BakoSafeTransaction,\n      name: transfer.name ?? transactionName,\n      transactionRequest: txData,\n      BakoSafeScript: scriptTransaction,\n      witnesses: [],\n      BakoSafeTransactionId: BakoSafeTransaction?.id,\n    };\n\n    return {\n      is: isNew,\n      data,\n    };\n  }\n\n  return {\n    is: isNew,\n    data: undefined,\n  };\n};\n\nexport const isOldTransaction = async ({\n  transfer,\n  auth,\n  vault,\n}: TransferFactory) => {\n  const isOld = typeof transfer === 'string';\n\n  if (isOld) {\n    if (!auth) {\n      throw new Error(TransferInstanceError.REQUIRED_AUTH);\n    }\n    const service = new TransactionService(auth);\n    //if transfer min length is 36, is an transaction id\n    //else is an hash\n    const transaction =\n      transfer.length <= 36\n        ? await service.findByTransactionID(transfer)\n        : await service.findByHash(transfer);\n\n    const scriptTransactionRequest = await formatTransaction({\n      name: transaction.name!,\n      vault: vault,\n      assets: transaction.assets,\n      witnesses: transaction.witnesses\n        .map((witness) => witness.signature)\n        .filter((witness) => !!witness),\n    });\n\n    const data: TransferConstructor = {\n      vault,\n      service,\n      name: transaction.name!,\n      BakoSafeScript: scriptTransactionRequest,\n      transactionRequest: transactionRequestify(scriptTransactionRequest),\n      witnesses: transaction.witnesses.map((witness) => witness.account),\n      BakoSafeTransactionId: transaction.id,\n      BakoSafeTransaction: transaction,\n    };\n\n    return {\n      is: isOld,\n      data,\n    };\n  }\n\n  return {\n    is: isOld,\n    data: undefined,\n  };\n};\n\nexport const isNewTransactionByScript = async ({\n  transfer,\n  auth,\n  vault,\n  isSave,\n}: TransferFactory) => {\n  const isScript =\n    transfer &&\n    Object.entries(transfer).length > 3 &&\n    typeof transfer != 'string' &&\n    'type' in transfer;\n\n  const transactionName = `tx_${uuidv4()}`;\n  const service = auth && new TransactionService(auth);\n\n  if (isScript) {\n    vault.populateTransactionPredicateData(transfer);\n    const txData = transactionRequestify(transfer);\n    const hashTxId = getHashTxId(txData, vault.provider.getChainId());\n    const assets = txData.getCoinOutputs().map((coin) => ({\n      assetId: coin.assetId.toString(),\n      to: coin.to.toString(),\n      amount: bn(coin.amount).format().toString(),\n    }));\n\n    let transaction: ITransaction | undefined = undefined;\n    if (auth && service && isSave) {\n      transaction = await service.create({\n        assets,\n        hash: hashTxId,\n        txData: txData,\n        name: transactionName,\n        status: TransactionStatus.AWAIT_REQUIREMENTS,\n        predicateAddress: vault.address.toString(),\n      });\n    }\n\n    const witnesses =\n      transaction && transaction.witnesses\n        ? transaction.witnesses\n            .map((witness) => witness.signature)\n            .filter((signature) => !!signature)\n        : [];\n\n    const data = {\n      vault,\n      service,\n      witnesses: witnesses,\n      name: transactionName,\n      transactionRequest: txData,\n      BakoSafeScript: new ScriptTransactionRequest(),\n      BakoSafeTransaction: transaction,\n      BakoSafeTransactionId: transaction?.id,\n    };\n\n    return {\n      is: isScript,\n      data,\n    };\n  }\n\n  return {\n    is: isScript,\n    data: undefined,\n  };\n};\n\nexport const identifyCreateTransactionParams = async (\n  param: TransferFactory,\n): Promise<ICreationTransaction> => {\n  try {\n    const { data: oldData, is: isOld } = await isOldTransaction(param);\n    const { data: newData, is: isNew } = await isNewTransaction(param);\n    const { data: sData, is: isScript } = await isNewTransactionByScript(param);\n\n    if (isOld && !!oldData) {\n      return {\n        type: ECreationTransactiontype.IS_OLD,\n        payload: oldData!,\n      };\n    } else if (isNew && !!newData) {\n      return {\n        type: ECreationTransactiontype.IS_NEW,\n        payload: newData!,\n      };\n    }\n    return {\n      type: ECreationTransactiontype.IS_SCRIPT,\n      payload: sData!,\n    };\n  } catch (e: any) {\n    throw new Error(e.message);\n  }\n};\n","import { Address, B256Address, Provider, ZeroBytes32 } from 'fuels';\nimport {\n  ECreationtype,\n  IBakoSafeApi,\n  IConfVault,\n  ICreation,\n  IPayloadVault,\n} from './types';\nimport { PredicateService } from '../../api/predicates';\n\nexport const defaultValues: { [name: string]: string } = {\n  signature:\n    '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  address: '0x0000000000000000000000000000000000000000000000000000000000000000',\n};\n\nexport const makeHashPredicate = () => Address.fromRandom().toB256();\n\nexport const makeSubscribers = (subscribers: string[]) => {\n  const array: B256Address[] = Array(10).fill(ZeroBytes32);\n  subscribers.forEach((value, index) => {\n    array[index] = Address.fromString(value).toB256();\n  });\n  return array;\n};\n\nexport const instanceByOldUtil = async (\n  params: IBakoSafeApi,\n): Promise<IPayloadVault> => {\n  const { id, predicateAddress, token, address } = params;\n  const hasId = 'id' in params && id;\n\n  if (predicateAddress == undefined && id == undefined) {\n    throw new Error('predicateAddress or BakoSafePredicateId is required');\n  }\n\n  const api = new PredicateService({\n    address,\n    token,\n  });\n\n  const result = hasId\n    ? await api.findById(id)\n    : await api.findByAddress(predicateAddress!);\n\n  if (!result) {\n    throw new Error('BakoSafeVault not found');\n  }\n\n  return {\n    configurable: JSON.parse(result.configurable),\n    provider: await Provider.create(result.provider),\n    name: result.name,\n    description: result.description,\n    abi: result.abi,\n    bytecode: result.bytes,\n    BakoSafeAuth: {\n      address,\n      token,\n    },\n    BakoSafeVaultId: result.id,\n    BakoSafeVault: result,\n    api,\n  };\n};\n\nexport const instanceByNewUtil = (params: IPayloadVault): IPayloadVault => {\n  const hasAuth = 'BakoSafeAuth' in params && params.BakoSafeAuth;\n  if (hasAuth) {\n    const { address, token } = params.BakoSafeAuth!;\n    params['api'] = new PredicateService({\n      address,\n      token,\n    });\n  }\n  return params;\n};\n\nexport const isOldPredicate = async (\n  param: IBakoSafeApi | IPayloadVault,\n): Promise<{ is: boolean; data: IPayloadVault | undefined }> => {\n  const is =\n    ('predicateAddress' in param || 'id' in param) &&\n    'address' in param &&\n    'token' in param;\n\n  return {\n    is,\n    data: is ? await instanceByOldUtil(param) : undefined,\n  };\n};\n\nexport const isNewPredicate = async (\n  param: IBakoSafeApi | IPayloadVault,\n): Promise<{\n  is: boolean;\n  data: IPayloadVault | undefined;\n}> => {\n  const is = 'configurable' in param && 'provider' in param;\n  is && validations(param.configurable);\n  return {\n    is,\n    data: is ? instanceByNewUtil(param) : undefined,\n  };\n};\n\nexport const validations = (configurable: IConfVault) => {\n  const { SIGNATURES_COUNT, SIGNERS } = configurable;\n  if (!SIGNATURES_COUNT || Number(SIGNATURES_COUNT) == 0) {\n    throw new Error('SIGNATURES_COUNT is required must be granter than zero');\n  }\n  if (!SIGNERS || SIGNERS.length === 0) {\n    throw new Error('SIGNERS must be greater than zero');\n  }\n  if (SIGNERS.length < Number(SIGNATURES_COUNT)) {\n    throw new Error('Required Signers must be less than signers');\n  }\n};\n\nexport const identifyCreateVaultParams = async (\n  param: IPayloadVault | IBakoSafeApi,\n): Promise<ICreation> => {\n  try {\n    const { data: oldData, is: isOld } = await isOldPredicate(param);\n    const { data: newData } = await isNewPredicate(param);\n\n    if (isOld && !!oldData) {\n      return {\n        type: ECreationtype.IS_OLD,\n        payload: oldData!,\n      };\n    }\n    return {\n      type: ECreationtype.IS_NEW,\n      payload: newData!,\n    };\n  } catch (e: any) {\n    throw new Error(e.message);\n  }\n};\n","import { Provider, TransactionRequestLike } from 'fuels';\nimport { IBakoSafeAuth } from '../../api/auth/types';\nimport {\n  IListTransactions,\n  IPredicate,\n  IPredicateService,\n} from '../../api/predicates';\nimport { ITransferAsset } from '../../utils/assets';\nimport { IFormatTransfer, Transfer } from '../transfers';\nimport { ITransactionResume, IWitnesses } from '../../api';\nimport { IPagination } from '../../api/utils/pagination';\n\nexport interface IConfVault {\n  HASH_PREDICATE?: number[];\n  SIGNATURES_COUNT: number;\n  SIGNERS: string[];\n  network: string;\n  chainId: number;\n}\n\nexport enum ECreationtype {\n  IS_OLD = 'IS_OLD',\n  IS_NEW = 'IS_NEW',\n}\n\nexport interface ICreationOldVault {\n  type: ECreationtype.IS_NEW;\n  payload: IPayloadVault;\n}\n\nexport interface ICreationNewVault {\n  type: ECreationtype.IS_OLD;\n  payload: IPayloadVault;\n}\n\nexport type ICreation = ICreationOldVault | ICreationNewVault;\n\nexport interface ITransferList {\n  [id: string]: Transfer;\n}\n\nexport interface IInstanceNewTransfer {\n  assets: ITransferAsset[];\n  witnesses: string[];\n}\n\nexport type IBakoSafeIncludeTransaction =\n  | IFormatTransfer\n  | TransactionRequestLike;\n\nexport interface IPayloadVault {\n  configurable: IConfVault;\n  provider: Provider;\n  name?: string;\n  description?: string;\n  transactionRecursiveTimeout?: number;\n  abi?: string;\n  bytecode?: string;\n  BakoSafeAuth?: IBakoSafeAuth;\n  BakoSafeVaultId?: string;\n  BakoSafeVault?: IPredicate;\n  api?: IPredicateService;\n}\nexport interface IBakoSafeApi extends IBakoSafeAuth {\n  id?: string;\n  predicateAddress?: string;\n}\nexport interface IBakoSafeGetTransactions {\n  resume: ITransactionResume;\n  witnesses: IWitnesses[];\n}\nexport interface IVault {\n  getAbi: () => { [name: string]: unknown };\n  getBin: () => string;\n  getConfigurable: () => IConfVault;\n  BakoSafeGetTransactions: (\n    params?: IListTransactions,\n  ) => Promise<IPagination<IBakoSafeGetTransactions>>;\n  BakoSafeIncludeTransaction: (\n    params: IBakoSafeIncludeTransaction,\n  ) => Promise<Transfer>;\n}\n","import {\n  Address,\n  InputType,\n  Predicate,\n  Resource,\n  ScriptTransactionRequest,\n  arrayify,\n  hexlify,\n  BN,\n  BytesLike,\n  bn,\n} from 'fuels';\nimport { IAssetGroupByTo } from '../../utils/assets';\nimport { BakoSafe } from '../../../configurables';\nimport { transactionScript } from './helpers';\n\ninterface BakoSafeScriptTransactionConstructor {\n  gasPrice: BN;\n  gasLimit: BN;\n  script: BytesLike;\n}\n\nexport class BakoSafeScriptTransaction extends ScriptTransactionRequest {\n  constructor(\n    { script, gasLimit, gasPrice }: BakoSafeScriptTransactionConstructor = {\n      script: transactionScript,\n      gasPrice: bn(BakoSafe.getChainConfig('GAS_PRICE')),\n      gasLimit: bn(BakoSafe.getChainConfig('GAS_LIMIT')),\n    },\n  ) {\n    super({\n      gasPrice,\n      gasLimit,\n      script,\n    });\n  }\n\n  public async instanceTransaction(\n    _coins: Resource[],\n    vault: Predicate<[]>,\n    outputs: IAssetGroupByTo,\n    witnesses?: string[],\n  ) {\n    Object.entries(outputs).map(([, value]) => {\n      this.addCoinOutput(\n        Address.fromString(value.to),\n        value.amount,\n        value.assetId,\n      );\n    });\n\n    //todo: invalidate used coins [make using BakoSafe api assets?]\n    this.addResources(_coins);\n\n    this.inputs?.forEach((input) => {\n      if (\n        input.type === InputType.Coin &&\n        hexlify(input.owner) === vault.address.toB256()\n      ) {\n        input.predicate = arrayify(vault.bytes);\n        //input.predicateData = arrayify();\n      }\n    });\n\n    if (witnesses) {\n      this.witnesses = [...this.witnesses, ...witnesses];\n    }\n  }\n}\n","import { arrayify, Predicate } from 'fuels';\n\nimport {\n  defaultListParams,\n  IBakoSafeAuth,\n  IListTransactions,\n  IPredicate,\n  IPredicateService,\n} from '../../api';\nimport {\n  ECreationtype,\n  IBakoSafeApi,\n  IBakoSafeIncludeTransaction,\n  IConfVault,\n  IPayloadVault,\n  IVault,\n} from './types';\nimport {\n  identifyCreateVaultParams,\n  makeHashPredicate,\n  makeSubscribers,\n} from './helpers';\nimport { Transfer } from '../transfers';\nimport { v4 as uuidv4 } from 'uuid';\nimport { AddressUtils } from '../../utils/address/Address';\nimport { PredicateAbi__factory } from '../../sway/predicates';\n\n/**\n * `Vault` are extension of predicates, to manager transactions, and sends.\n */\nexport class Vault extends Predicate<[]> implements IVault {\n  // private readonly RECURSIVE_TIMEOUT = 10000;\n\n  private bin: string;\n  private abi: { [name: string]: unknown };\n  private api!: IPredicateService;\n  private auth!: IBakoSafeAuth;\n  private configurable: IConfVault;\n\n  public name!: string;\n  //@ts-ignore\n  public BakoSafeVault!: IPredicate;\n  public BakoSafeVaultId!: string;\n  public description?: string;\n  public transactionRecursiveTimeout: number;\n\n  protected constructor({\n    configurable,\n    provider,\n    abi = PredicateAbi__factory.abi as unknown as string,\n    bytecode = PredicateAbi__factory.bin,\n    name,\n    description,\n    BakoSafeVaultId,\n    BakoSafeVault,\n    BakoSafeAuth,\n    transactionRecursiveTimeout = 1000,\n    api,\n  }: IPayloadVault) {\n    const _abi = typeof abi === 'string' ? JSON.parse(abi) : abi;\n    const _bin = bytecode;\n\n    const { network: _network, chainId: _chainId } = configurable;\n    const _configurable = Vault.makePredicate(configurable);\n    super(arrayify(_bin), provider, _abi, _configurable);\n\n    this.bin = _bin;\n    this.abi = _abi;\n    this.configurable = {\n      HASH_PREDICATE: _configurable.HASH_PREDICATE as number[],\n      SIGNATURES_COUNT: _configurable.SIGNATURES_COUNT as number,\n      SIGNERS: _configurable.SIGNERS as string[],\n      network: _network,\n      chainId: _chainId,\n    };\n    this.provider = provider;\n    this.name = name || `Vault - ${uuidv4()}`;\n    this.description = description;\n    this.BakoSafeVaultId = BakoSafeVaultId!;\n    this.transactionRecursiveTimeout = transactionRecursiveTimeout;\n    this.BakoSafeVault = BakoSafeVault!;\n    this.auth = BakoSafeAuth!;\n    this.api = api!;\n  }\n\n  /**\n   * Creates an instance of the Predicate class.\n   *\n   * @param configurable - The parameters of signature requirements.\n   *      @param HASH_PREDICATE - Hash to works an unic predicate, is not required, but to instance old predicate is an number array\n   *      @param SIGNATURES_COUNT - Number of signatures required of predicate\n   *      @param SIGNERS - Array string of predicate signers\n   * @param abi - The JSON abi to BakoSafe multisig.\n   * @param bytecode - The binary code of preficate BakoSafe multisig.\n   * @param transactionRecursiveTimeout - The time to refetch transaction on BakoSafe API.\n   * @param BakoSafeAuth - The auth to BakoSafe API.\n   *\n   * @returns an instance of Vault\n   **/\n  static async create(params: IPayloadVault | IBakoSafeApi) {\n    const _params = await identifyCreateVaultParams(params);\n\n    switch (_params.type) {\n      case ECreationtype.IS_OLD:\n        return new Vault(_params.payload);\n      case ECreationtype.IS_NEW:\n        const vault = new Vault(_params.payload);\n        !!vault.api && (await vault.createOnService());\n        return vault;\n      default:\n        throw new Error('Invalid param type to create a vault');\n    }\n  }\n\n  /**\n   * To use BakoSafe API, auth is required\n   *\n   * @returns if auth is not defined, throw an error\n   */\n  private verifyAuth() {\n    if (!this.auth) {\n      throw new Error('Auth is required');\n    }\n  }\n\n  /**\n   * Send a caller to BakoSafe API to save predicate\n   * Set BakoSafeVaultId and BakoSafeVault\n   *\n   *\n   * @returns if auth is not defined, throw an error\n   */\n  private async createOnService() {\n    this.verifyAuth();\n    const { id, ...rest } = await this.api.create({\n      name: this.name,\n      description: this.description,\n      predicateAddress: this.address.toString(),\n      minSigners: this.configurable.SIGNATURES_COUNT,\n      addresses: AddressUtils.hex2string(this.configurable.SIGNERS),\n      bytes: this.bin,\n      abi: JSON.stringify(this.abi),\n      configurable: JSON.stringify(this.configurable),\n      provider: this.provider.url,\n    });\n    this.BakoSafeVault = {\n      ...rest,\n      id,\n    };\n    this.BakoSafeVaultId = id;\n  }\n\n  /**\n   * Make configurable of predicate\n   *\n   * @param {IConfVault} configurable - The parameters of signature requirements.\n   * @returns an formatted object to instance a new predicate\n   */\n  private static makePredicate(configurable: IConfVault) {\n    const _configurable: { [name: string]: unknown } = {\n      SIGNATURES_COUNT: configurable.SIGNATURES_COUNT,\n      SIGNERS: makeSubscribers(configurable.SIGNERS),\n      HASH_PREDICATE: configurable.HASH_PREDICATE ?? makeHashPredicate(),\n    };\n\n    return _configurable;\n  }\n\n  /**\n   * Include new transaction to vault\n   *\n   * @param {IFormatTransfer} param - IFormatTransaction or TransactionRequestLike\n   * @param {TransactionRequestLike} param - IFormatTransaction or TransactionRequestLike\n   * @returns return a new Transfer instance\n   */\n  public async BakoSafeIncludeTransaction(param: IBakoSafeIncludeTransaction) {\n    return Transfer.instance({\n      auth: this.auth,\n      vault: this,\n      transfer: param,\n      isSave: true,\n    });\n  }\n\n  /**\n   * Return an list of transaction of this vault\n   *\n   *\n   * @param {IListTransactions} params - The params to list transactions\n   *  - has optional params\n   *  - by default, it returns the first 10 transactions\n   *\n   *\n   * @returns {Promise<IPagination<IBakoSafeGetTransactions>>} an transaction paginated transaction list\n   *\n   *\n   */\n  public async BakoSafeGetTransactions(params?: IListTransactions) {\n    this.verifyAuth();\n\n    const tx = await this.api\n      .listPredicateTransactions({\n        predicateId: [this.BakoSafeVaultId],\n        ...(params ?? defaultListParams),\n      })\n      .then((data) => {\n        return {\n          ...data,\n          data: data.data.map((tx) => {\n            return {\n              resume: tx.resume,\n              witnesses: tx.witnesses,\n            };\n          }),\n        };\n      });\n\n    return tx;\n  }\n\n  /**\n   * Return an list of transaction of this vault\n   * @param transactionId - The transaction id on BakoSafeApi\n   *\n   * @returns an transaction list\n   *\n   *\n   */\n  public async BakoSafeGetTransaction(transactionId: string) {\n    return Transfer.instance({\n      vault: this,\n      auth: this.auth,\n      transfer: transactionId,\n    });\n  }\n\n  /**\n   * Return abi of this vault\n   *\n   * @returns an abi\n   */\n  public getAbi() {\n    return this.abi;\n  }\n\n  /**\n   * Return binary of this vault\n   *\n   * @returns an binary\n   */\n  public getBin() {\n    return this.bin;\n  }\n\n  /**\n   * Return this vault configurables state\n   *\n   * @returns configurables [signers, signers requested, hash]\n   */\n  public getConfigurable() {\n    return this.configurable;\n  }\n}\n","import { assets } from '../../../test/mocks';\nimport { Address } from 'fuels';\n\nexport class AddressUtils {\n  static hex2string(add: string[]) {\n    return add\n      .filter((item: string) => item != assets['ETH'])\n      .map((item: string) => {\n        return Address.fromB256(item).toString();\n      });\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n\n/* tslint:disable */\n/* eslint-disable */\n\n/*\n  Fuels version: 0.76.0\n  Forc version: 0.51.1\n  Fuel-Core version: 0.22.1\n*/\n\nimport {\n  BigNumberish,\n  BN,\n  Predicate,\n  Provider,\n} from 'fuels';\n\nexport type PredicateAbiConfigurables = {\n  SIGNERS: [string, string, string, string, string, string, string, string, string, string];\n  SIGNATURES_COUNT: BigNumberish;\n  HASH_PREDICATE: string;\n};\n\ntype PredicateAbiInputs = [];\n\nconst _abi = {\n  \"types\": [\n    {\n      \"typeId\": 0,\n      \"type\": \"[_; 10]\",\n      \"components\": [\n        {\n          \"name\": \"__array_element\",\n          \"type\": 1,\n          \"typeArguments\": null\n        }\n      ],\n      \"typeParameters\": null\n    },\n    {\n      \"typeId\": 1,\n      \"type\": \"b256\",\n      \"components\": null,\n      \"typeParameters\": null\n    },\n    {\n      \"typeId\": 2,\n      \"type\": \"bool\",\n      \"components\": null,\n      \"typeParameters\": null\n    },\n    {\n      \"typeId\": 3,\n      \"type\": \"u64\",\n      \"components\": null,\n      \"typeParameters\": null\n    }\n  ],\n  \"functions\": [\n    {\n      \"inputs\": [],\n      \"name\": \"main\",\n      \"output\": {\n        \"name\": \"\",\n        \"type\": 2,\n        \"typeArguments\": null\n      },\n      \"attributes\": null\n    }\n  ],\n  \"loggedTypes\": [],\n  \"messagesTypes\": [],\n  \"configurables\": [\n    {\n      \"name\": \"SIGNERS\",\n      \"configurableType\": {\n        \"name\": \"\",\n        \"type\": 0,\n        \"typeArguments\": null\n      },\n      \"offset\": 5012\n    },\n    {\n      \"name\": \"SIGNATURES_COUNT\",\n      \"configurableType\": {\n        \"name\": \"\",\n        \"type\": 3,\n        \"typeArguments\": null\n      },\n      \"offset\": 4996\n    },\n    {\n      \"name\": \"HASH_PREDICATE\",\n      \"configurableType\": {\n        \"name\": \"\",\n        \"type\": 1,\n        \"typeArguments\": null\n      },\n      \"offset\": 4964\n    }\n  ]\n}\n\nconst _bin = '0x740000034700000000000000000012fc5dfcc00110fff3001aec500091000f781a4000005d47f00a264400001a6870005047b87072480020284504805d43f00a286914005d43f00b264000001a6070001a6c00001a5000005d67f00b5d43f00a1641b400764002d16140000113450000764400061341004076400001360000005043ba901a401000740000025043ba901a400000134500007644000613410040764000025d43f00c36400000615c010574000001615c00075043bb785d47f03f1045130072480020284114805047bbd85d4bf03f10492300724c0020284524c0a1410460134100001a5800001a540000764002ad164165c0764000065d43f01115415400764000025d43f0111341540024400000614d64015043b6d072440090284134405d43b0da13410000764000e9614164015047b9501ae900001ae5100020f8330058fbe00250fbe0047400037e1a43d0005047be807248004028450480506bbe801a400000264000001a6c7000134140001a70000076400020134000007640001a107005001541c0007640000174000008267000001a4470001540000076400001740000021a4000002845b4001a6d10001a48000016412500764000031a400000264000007400000c1a4000001041b40010410480104584805c4510005e411000104920407500000b1a400000264000001a7140001a6d80005d43f040104103005d47f04010451300504bbe60724c0020284904c05043be604241b700504bbed0724c0020284904c05043bed0724800201b480480104bb480724c0020284914c0724800201b481480104bb480724c0020284914c05047b420724800402847b480504bbe00724c0040284914c05047be00504bb040724c00402849a4c0504fb6b072680020284d06803e4524c01a408000134100407640000a5043b5e85fec00bd5047be0050490008724c0040284914c0504bbae07244004828490440740000065043b3d85fec107b5fec0083504bbae072440048284904405043bd3872440048284124405043b76072440048284124405d43b15c13410040764000365043bd385047b81872480048284504805d43b1a71341000076400001360000005043b818504100085047bce872480040284504805043bce8724400201b440440104504405043bce8724800201b481480104904805043b4a0724c0020284114c050450020724c0020284524c05047ba4072480040284504805043b9b01ae910001ae5000020f8330058fbe00250fbe004740003061a43d0005047bc3872480020284504805043b5685fec00ad5047bc38504bb0c0724c0020284914c050450008724c0020284524c0504bbb2872440028284904407400000a5043b760504100405047b3a05fec107450491020724c0008284904c0504bbb2872400028284914005d43f041104103005047b7a8724c0028284524c05d47b16513451000504fbb5072480020284d048076440001740000095043b7a8504100085047bd8072480020284504805043bd80504fbb5072440020284d04405043be4072440020284134405043be401a6c00005d47f0121645b4401a48000076440001740000135047b2605d4bf04210492300724c0140284524c0724800201b49b480104914805047bbb8724c0020284504c0504fbc1872680020284d2680a14514e01a48100076440002106db04075000016105554805043bb70740001b35043b6d0504100085047bef072480088284504805d43f03b104134005d47b1e6504bb8b01ae900001ae510001ae1200020f8330058fbe00250fbe004740002031a47d000504bbd28724c0010284914c05047bd28504bb630724c0010284914c05d692001504bb640724c0010284914c05d6d20005d47b1e61b441440104504405d4bb1e7504fb8c01ae910001ae520001ae1300020f8330058fbe00250fbe004740001ea1a47d000504bbec0724c0010284914c05047bec0504bb650724c0010284914c05d712001504bb660724c0010284914c05d7520005d47b1e61b441440104104405d47b1e71b441440104104405d47b1e8504bb8d01ae900001ae510001ae1200020f8330058fbe00250fbe004740001ce1a43d0005047bc5872480010284504805043bc585047b67072480010284504805d7910015047b68072480010284504805d7d10005043b9201ae9000020f8330058fbe00250fbe0047400022b1a43d0005d8100005d4500015d8500021341a00076400021134210007640001a10421680154904407648000174000007264000001a487000154d1000764c000174000001284a04401a8120001a4c000016453680764400051a440000264400001a8500001a4500007400000c10460840104514c01049b4c05c4920005e452000104d30407500000c1a400000264000001a85a0001a45a0001a81b0001341400076400021134210007640001a10421500154904407648000174000007264000001a487000154d1000764c000174000001284a04401a8120001a4c000016453500764400051a440000264400001a8500001a4500007400000c10460840104514c0104984c05c4920005e452000104d30407500000c1a400000264000001a8540001a4590001a8180001341c00076400021134210007640001a10421700154904407648000174000007264000001a487000154d1000764c000174000001284a04401a8120001a4c000016453700764400051a440000264400001a8500001a4500007400000c10460840104514c01049d4c05c4920005e452000104d30407500000c1a400000264000001a85c0001a45c0001a81d0005043b9d05fee013a5fed113b5fee113c5047b8e01ae900001ae5100020f8330058fbe00250fbe004740001611a43d0005047bc6872480020284504805043b9381ae9000020f8330058fbe00250fbe004740001a91a43d0005d6900005d7100015d6d00021341e000764000211341b0007640001a1041b780154507007644000174000007264000001a4470001549c00076480001740000012845a7001a6910001a4c000016453780764400051a440000264400001a6d00001a7100007400000c1045a6c0104514c01049f4c05c4920005e452000104d30407500000c1a400000264000001a6de0001a71e0001a69f0005043bc685d47f00a264400001a447000504bb890724c0020284904c05d43f00a284524005d43f00a13410000764000231341b0007640001c5d43f00a1041b400154907007648000174000007264000001a487000154dc000764c0001740000012849a7001a6920001a7000005d4bf00a1649c480764800051a440000264400001a6d00001a7100007400000c1049a6c010492700104d17005c4d30005e4930001071c0407500000d1a400000264000005d6ff00a5d73f00a1a6910005d43f040104103005047b9e85feda13d5fedc13e5fedb13f504bb9001ae910001ae5200020f8330058fbe00250fbe004740000f41a47d000504bbc88724c0020284914c05047bef0504bbc88504fb080726800201b68068010693680726c0020286906c0726800201b68168010693680726c0020286906c05043b4607268004028413680504fbdc072680040284d06805043bdc0504fb0e072680040284d16805047b69072680020284526803f4134401a408000134100407640000a5043b5a05fec00b45047bdc050490008724c0040284914c0504bba987244004828490440740000065043b4e05fec109c5fec00a4504bba9872440048284904405043b7d072440048284124405d43b1531341000076400001360000005043b7d0504100085047bca872480040284504805043bca8724400201b440440104504405043bca8724800201b481480104904805043b528724c0020284114c050450020724c0020284524c05047ba0072480040284504805043b9901ae910001ae5000020f8330058fbe00250fbe004740001231a43d0005047bda072480020284504805043bda01a6c00005d47f0121645b4401a48000076440001740000135047b1205d4bf04210492300724c0140284524c0724800201b49b480104914805047bb98724c0020284504c0504fbbf872680020284d2680a14514e01a48100076440002106db04075000016105554805043bb7010596040750002ab240000005d43f00a164106c0764000025d43f00a134106c07640000a1041a6c05047b5905fec10b25c4100005049100f5e490000504bba807240001028491400740000055043b3c85fec0079504bba8072440010284904405043b86072440010284124405d43b1501341004076400001360000005043b8605041000f5c4100005d47f043104513005d4bf03c1f490480724c00011b4924c0104914805c452000134946407648000174000010134990001a4c1000764800025d4bf03d1b4d2640154936407648000174000007264c00001a487000155590007654000174000001284986401a6120001a653000104985005e491000104540405d4bf043104923005c4ff1f0114104c0724c00011b4104c0104124005c410000134916407648000174000010134990001a4c1000764800025d4bf03d1b4d2640154936407648000174000007264c00001a487000155190007650000174000001284986401a6120001a653000104984405e49000010511040106db0407500032f1af05000910000285ff100005ff110015ff120025ff130035ff3b0041aec5000910000101a43a0001a4790001a4b80001a4fe0001b4510405fed00005fed10011a43b00072440010284904401af52000920000101af9300059f050285d43c0005d47c0015d4bc0025d4fc0035defc004920000284af800001af05000910000505ff100005ff110015ff120025ff130035ff140045ff150055ff160065ff170075ff180085ff3b0091aec5000910000201a43a0001a4790001a4be0001a4c0000264c00001a4c70005d5100005d5500025d410002134100001a58000076400020134000007640001a10580540154160007640000174000008265800001a407000155c0000765c0001740000021a5c0000284135c01a4d00001a60000016418540764000031a400000264000007400000c1a4000001041340010410600105d46005c5d70005e417000106180407500000b1a400000264000001a5950001a4d40005d43f040104103007250002028ed05001a43b00042413580724c0020284504c01af51000920000201af9200059f050505d43c0005d47c0015d4bc0025d4fc0035d53c0045d57c0055d5bc0065d5fc0075d63c0085defc009920000504af800001af05000910000205ff100005ff110015ff120025ff3b0031aec5000910000001a43a0001a47e0001a480000264800001a4870005f4120005f4000015f4000021af50000920000001af9100059f050205d43c0005d47c0015d4bc0025defc003920000204af800001af05000910000285ff100005ff110015ff120025ff130035ff3b0041aec5000910000001a43a0001a4790001a4be000724c0040284504c01af51000920000001af9200059f050285d43c0005d47c0015d4bc0025d4fc0035defc004920000284af800001af05000910000385ff100005ff110015ff120025ff130035ff140045ff150055ff3b0061aec5000910000781a43a0001a4b90001a4fe0005d47f040104513001a500000265000001a5070005fed40085fec00095fec000a5053b0407254004028ed05401aebb0001ae5400020f8330058fbe00250fbe004740000165043b05872500020284115005053b0585d43b0085d47b00a4251044072400020284944001af52000920000781af9300059f050385d43c0005d47c0015d4bc0025d4fc0035d53c0045d57c0055defc006920000384af800001af05000910000585ff100005ff110015ff120025ff130035ff140045ff150055ff160065ff170075ff180085ff190095ff3b00a1aec5000910000401a43a0001a6790001a63e0005d47f00a264400001a4470007248002028ed04801a4bb0005d4d20005d5120015d5520025d4920035f4530005f4540015f4550025f4520035d4bf00a134920007648002c5d49900213492000764800225d4990025d4ff00a104924c05d4d90025d5190005d559001155925407658000174000007264800001a587000155d5000765c000174000001285945401a5160005f6540001a5800005d53f00a16516500765000055f6520015f6520021a440000264400007400000f5d519000105144c010514580105515805c5550005e515000105960407500000e5f6510005d47f00a5f6510015d47f00a5f6510021a44000026440000504100205d47f00a264400001a447000504bb020724c0020284904c05d4120005d4d20015d5120025d4920035f4500005f4530015f4540025f4520035d43f00a134100007640002c5d41900213410000764000225d4190025d4bf00a104104805d4990025d4d90005d519001155505007654000174000007264000001a547000155940007658000174000001285535001a4d50005f6530001a5400005d4ff00a164d54c0764c00055f6500015f6500021a400000264000007400000f5d4d9000104d3480104d3540105115405c5140005e4d4000105550407500000e5f6510005d43f00a5f6500015d43f00a5f6500021a400000264000001af40000920000401af9800059f050585d43c0005d47c0015d4bc0025d4fc0035d53c0045d57c0055d5bc0065d5fc0075d63c0085d67c0095defc00a920000584af8000047000000111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000003031323334353637383961626364656600000000000000200000000000000040cccccccccccc000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000af000000000000000000000000001364000000000000131c00000000000012fc0000000000001394000000000000133c'\n\nexport class PredicateAbi__factory {\n\n  static readonly abi = _abi\n  static readonly bin = _bin;\n\n  static createInstance(provider: Provider, configurables?: PredicateAbiConfigurables) {\n\n    const { abi, bin } = PredicateAbi__factory\n\n    const predicate = new Predicate(bin, provider, abi, configurables);\n\n    return predicate;\n\n  }\n\n}\n","enum BakoSafeConnectors {\n  //accounts\n  ACCOUNTS = 'accounts',\n  CURRENT_ACCOUNT = 'currentAccount',\n\n  // transfer\n  TRANSACTION_CREATED = '[TRANSACTION_CREATED]',\n  TRANSACTION_SEND = '[TRANSACTION_SEND]',\n\n  //popup auth\n  AUTH_CONFIRMED = '[AUTH_CONFIRMED]',\n  AUTH_REJECTED = '[AUTH_REJECTED]',\n  AUTH_DISCONECT_DAPP = '[AUTH_DISCONECT_DAPP]',\n  AUTH_DISCONECT_CONFIRM = '[AUTH_DISCONECT_CONFIRM]',\n\n  //connections\n  CONNECTION = 'connection',\n  POPUP_TRANSFER = '[POPUP_TRANSFER]_connected',\n  CONNECTED_NETWORK = '[CONNECTED_NETWORK]',\n\n  //default\n  DEFAULT = 'message',\n}\nexport { BakoSafeConnectors };\n"]}