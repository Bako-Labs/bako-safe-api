{"version":3,"sources":["../src/test-utils/getForcProject.ts","../src/utils/arrayify.ts","../src/utils/hexlify.ts","../src/utils/normalizeString.ts","../src/test-utils/expectToBeInRange.ts"],"sourcesContent":["import { existsSync, readFileSync } from 'fs';\nimport { join } from 'path';\n\nimport { hexlify } from '../index';\nimport { normalizeString } from '../utils/normalizeString';\n\ninterface IGetForcProjectParams {\n  projectDir: string;\n  projectName: string;\n  build: 'debug' | 'release';\n}\n\nexport const getProjectBuildDir = (params: IGetForcProjectParams) =>\n  join(params.projectDir, 'out', params.build);\nexport const getProjectReleaseDir = (params: IGetForcProjectParams) =>\n  join(params.projectDir, 'out', params.build);\nexport const getProjectTempDir = (params: IGetForcProjectParams) =>\n  join(getProjectBuildDir(params), '__temp__');\n\nexport const getProjectAbiPath = (params: IGetForcProjectParams) =>\n  join(getProjectBuildDir(params), `${params.projectName}-abi.json`);\n\nexport const getProjectBinPath = (params: IGetForcProjectParams) =>\n  join(getProjectBuildDir(params), `${params.projectName}.bin`);\n\nexport const getProjectStorageSlotsPath = (params: IGetForcProjectParams) =>\n  join(getProjectBuildDir(params), `${params.projectName}-storage_slots.json`);\n\nexport const getProjectAbiName = (params: IGetForcProjectParams) => `${params.projectName}-abi`;\n\nexport const getProjectNormalizedName = (params: IGetForcProjectParams) =>\n  normalizeString(params.projectName);\n\nexport const getProjectAbi = (params: IGetForcProjectParams) => {\n  const projectPath = getProjectAbiPath(params);\n  const abiContents = JSON.parse(readFileSync(projectPath, 'utf-8'));\n  return abiContents;\n};\n\nexport const getProjectStorageSlots = (params: IGetForcProjectParams) => {\n  const storageSlotsFilePath = getProjectStorageSlotsPath(params);\n  if (!existsSync(storageSlotsFilePath)) {\n    return [];\n  }\n  const storageSlots = JSON.parse(readFileSync(storageSlotsFilePath, 'utf-8'));\n  return storageSlots;\n};\n\nexport const getForcProject = <T = unknown>(params: IGetForcProjectParams) => {\n  const buildDir = getProjectBuildDir(params);\n  const tempDir = getProjectTempDir(params);\n  const binPath = getProjectBinPath(params);\n  const binHexlified = hexlify(readFileSync(binPath));\n  const abiPath = getProjectAbiPath(params);\n  const abiName = getProjectAbiName(params);\n  const abiContents: T = getProjectAbi(params);\n  const normalizedName = getProjectNormalizedName(params);\n  const storageSlots: Array<{\n    key: string;\n    value: string;\n  }> = getProjectStorageSlots(params);\n\n  const inputGlobal = `${buildDir}/*-abi.json`;\n\n  return {\n    name: params.projectName,\n    storageSlots,\n    normalizedName,\n    buildDir,\n    tempDir,\n    binPath,\n    binHexlified,\n    abiPath,\n    abiName,\n    abiContents,\n    inputGlobal,\n  };\n};\n","import { FuelError, ErrorCode } from '@fuel-ts/errors';\nimport type { BytesLike } from '@fuel-ts/interfaces';\n\n/**\n * Converts a bytes-like value to a `Uint8Array`.\n *\n * @param value - the value to convert to a Uint8Array\n * @returns the Uint8Array\n */\nexport const arrayify = (value: BytesLike): Uint8Array => {\n  // Return buffers as a new byte array\n  if (value instanceof Uint8Array) {\n    return new Uint8Array(value);\n  }\n\n  if (typeof value === 'string' && value.match(/^0x([0-9a-f][0-9a-f])*$/i)) {\n    const result = new Uint8Array((value.length - 2) / 2);\n    let offset = 2;\n    for (let i = 0; i < result.length; i++) {\n      result[i] = parseInt(value.substring(offset, offset + 2), 16);\n      offset += 2;\n    }\n    return result;\n  }\n\n  throw new FuelError(ErrorCode.PARSE_FAILED, 'invalid BytesLike value');\n};\n","import type { BytesLike } from '@fuel-ts/interfaces';\n\nimport { arrayify } from './arrayify';\n\nconst HexCharacters: string = '0123456789abcdef';\n\n/**\n *  Returns a hex representation of the inputted bytes.\n */\nexport function hexlify(data: BytesLike): string {\n  const bytes = arrayify(data);\n\n  let result = '0x';\n  for (let i = 0; i < bytes.length; i++) {\n    const v = bytes[i];\n    result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\n  }\n  return result;\n}\n","import { ErrorCode, FuelError } from '@fuel-ts/errors';\n\n/**\n * Converts `some.string-value` into `SomeStringValue`.\n *\n * Examples:\n *  my-simple.test —— MySimpleTest\n *  myFile.ts —— MyFileTs\n *  my-abi.json —— MyAbiJson\n */\nexport const normalizeString = (str: string): string => {\n  const transformations: ((s: string) => string)[] = [\n    (s) => s.replace(/\\s+/g, '-'), // spaces to -\n    (s) => s.replace(/\\./g, '-'), // dots to -\n    (s) => s.replace(/_/g, '-'), // underscore to -\n    (s) => s.replace(/-[a-z]/g, (match) => match.slice(-1).toUpperCase()), // delete '-' and capitalize the letter after them\n    (s) => s.replace(/-/g, ''), // delete any '-' left\n    (s) => s.replace(/^\\d+/, ''), // removes leading digits\n    (s) => s[0].toUpperCase() + s.slice(1), // capitalize first letter\n  ];\n\n  const output = transformations.reduce((s, t) => t(s), str);\n\n  if (output === '') {\n    const errMsg = `The provided string '${str}' results in an empty output after`.concat(\n      ` normalization, therefore, it can't normalize string.`\n    );\n    throw new FuelError(ErrorCode.PARSE_FAILED, errMsg);\n  }\n\n  return output;\n};\n","export const expectToBeInRange = (params: { value: number; min: number; max: number }) => {\n  const { value, min, max } = params;\n  if (value >= min && value <= max) {\n    return true;\n  }\n\n  throw new Error(`Expected value: '${value}' to be within range: '${min}-${max}'`);\n};\n"],"mappings":"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","names":["ErrorCode","FuelError"]}