{"version":3,"sources":["%3Cdefine:process.env%3E","../src/predicates/factories/PredicateAbi__factory.ts","../src/transfers/Transfer.ts","../src/api/auth/auth.ts","../configurables.ts","../src/api/api.ts","../src/api/transactions/transactions.ts","../src/api/transactions/types.ts","../src/api/predicates/predicate.ts","../src/transfers/types.ts","../test/mocks/accounts.ts","../test/mocks/assets.ts","../test/utils/delay.ts","../test/utils/provider.ts","../test/utils/rootWallet.ts","../test/utils/sendCoins.ts","../test/utils/signin.ts","../test/utils/defaultVault.ts","../src/vault/Vault.ts","../src/vault/helpers.ts","../src/address/Address.ts","../src/transfers/ScriptTransaction.ts","../src/transfers/helpers.ts","../src/assets/Assets.ts","../src/assets/helpers.ts","../../connector/dist/%3Cdefine:process.env%3E"],"names":["define_process_env_default","Predicate","_abi","_bin","_PredicateAbi__factory","provider","configurables","abi","bin","PredicateAbi__factory","bn","hexlify","ScriptTransactionRequest","transactionRequestify","TransactionResponse","axios","Provider","Wallet","uuidv4","PROVIDER","API_URL","BSAFE_URL","ENCODER","GAS_PRICE","GAS_LIMIT","REFETCH_TIMEOUT","defaultConfig","BSafe","params","key","AuthService","_AuthService","payload","user","data","address","result","pk","msg","wallet","BSAFETransactionId","approve","Api","auth","TransactionService","hash","transactionId","account","signer","SortOption","TransactionStatus","WitnessStatus","TransactionProcessStatus","PredicateService","predicateAddress","predicateId","TransferInstanceError","accounts","assets","delay","ms","resolve","LocalProvider","rootWallet","txParams","Address","arrayify","ZeroBytes32","defaultValues","makeHashPredicate","makeSubscribers","subscribers","array","value","index","AddressUtils","add","item","Vault","_Vault","configurable","bytecode","name","description","BSAFEVaultId","BSAFEVault","BSAFEAuth","transactionRecursiveTimeout","_network","_chainId","_configurable","SIGNATURES_COUNT","SIGNERS","isWithApi","isNew","id","token","hasId","api","bytes","vault","aux","_auth","rest","param","Transfer","transactions","transaction","InputType","Signer","hashMessage","transactionScript","recoverSigner","tx_id","a","BSAFEScriptTransaction","script","gasLimit","gasPrice","_coins","outputs","witnesses","input","Asset","list","acc","asset","assetId","amount","to","_assets","_fee","_assets_aux","predicateCoins","predicateCoin","coin","assetsList","_Transfer","transactionRequest","BSAFEScript","service","BSAFETransaction","transfer","isSave","getHashTxId","chainId","transactionName","scriptTransactionRequest","witness","assest","scriptTransaction","txData","hashTxId","signature","block","coins","transactionCoins","script_t","tx","tx_est","encodedTransaction","io"],"mappings":"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","sourcesContent":["","/* Autogenerated file. Do not edit manually. */\n\n/* tslint:disable */\n/* eslint-disable */\n\n/*\n  Fuels version: 0.73.0\n  Forc version: 0.49.2\n  Fuel-Core version: 0.22.0\n*/\n\nimport {\n  BigNumberish,\n  BN,\n  Predicate,\n  Provider,\n} from 'fuels';\n\nexport type PredicateAbiConfigurables = {\n  SIGNERS: [string, string, string, string, string, string, string, string, string, string];\n  SIGNATURES_COUNT: BigNumberish;\n  HASH_PREDICATE: string;\n};\n\ntype PredicateAbiInputs = [];\n\nconst _abi = {\n  \"types\": [\n    {\n      \"typeId\": 0,\n      \"type\": \"[_; 10]\",\n      \"components\": [\n        {\n          \"name\": \"__array_element\",\n          \"type\": 1,\n          \"typeArguments\": null\n        }\n      ],\n      \"typeParameters\": null\n    },\n    {\n      \"typeId\": 1,\n      \"type\": \"b256\",\n      \"components\": null,\n      \"typeParameters\": null\n    },\n    {\n      \"typeId\": 2,\n      \"type\": \"bool\",\n      \"components\": null,\n      \"typeParameters\": null\n    },\n    {\n      \"typeId\": 3,\n      \"type\": \"u64\",\n      \"components\": null,\n      \"typeParameters\": null\n    }\n  ],\n  \"functions\": [\n    {\n      \"inputs\": [],\n      \"name\": \"main\",\n      \"output\": {\n        \"name\": \"\",\n        \"type\": 2,\n        \"typeArguments\": null\n      },\n      \"attributes\": null\n    }\n  ],\n  \"loggedTypes\": [],\n  \"messagesTypes\": [],\n  \"configurables\": [\n    {\n      \"name\": \"SIGNERS\",\n      \"configurableType\": {\n        \"name\": \"\",\n        \"type\": 0,\n        \"typeArguments\": null\n      },\n      \"offset\": 5012\n    },\n    {\n      \"name\": \"SIGNATURES_COUNT\",\n      \"configurableType\": {\n        \"name\": \"\",\n        \"type\": 3,\n        \"typeArguments\": null\n      },\n      \"offset\": 4996\n    },\n    {\n      \"name\": \"HASH_PREDICATE\",\n      \"configurableType\": {\n        \"name\": \"\",\n        \"type\": 1,\n        \"typeArguments\": null\n      },\n      \"offset\": 4964\n    }\n  ]\n}\n\nconst _bin = '0x740000034700000000000000000012fc5dfcc00110fff3001aec500091000f781a4000005d47f00a264400001a6870005047b87072480020284504805d43f00a286914005d43f00b264000001a6070001a6c00001a5000005d67f00b5d43f00a1641b400764002d16140000113450000764400061341004076400001360000005043ba901a401000740000025043ba901a400000134500007644000613410040764000025d43f00c36400000615c010574000001615c00075043bb785d47f03f1045130072480020284114805047bbd85d4bf03f10492300724c0020284524c0a1410460134100001a5800001a540000764002ad164165c0764000065d43f01115415400764000025d43f0111341540024400000614d64015043b6d072440090284134405d43b0da13410000764000e9614164015047b9501ae900001ae5100020f8330058fbe00250fbe0047400037e1a43d0005047be807248004028450480506bbe801a400000264000001a6c7000134140001a70000076400020134000007640001a107005001541c0007640000174000008267000001a4470001540000076400001740000021a4000002845b4001a6d10001a48000016412500764000031a400000264000007400000c1a4000001041b40010410480104584805c4510005e411000104920407500000b1a400000264000001a7140001a6d80005d43f040104103005d47f04010451300504bbe60724c0020284904c05043be604241b700504bbed0724c0020284904c05043bed0724800201b480480104bb480724c0020284914c0724800201b481480104bb480724c0020284914c05047b420724800402847b480504bbe00724c0040284914c05047be00504bb040724c00402849a4c0504fb6b072680020284d06803e4524c01a408000134100407640000a5043b5e85fec00bd5047be0050490008724c0040284914c0504bbae07244004828490440740000065043b3d85fec107b5fec0083504bbae072440048284904405043bd3872440048284124405043b76072440048284124405d43b15c13410040764000365043bd385047b81872480048284504805d43b1a71341000076400001360000005043b818504100085047bce872480040284504805043bce8724400201b440440104504405043bce8724800201b481480104904805043b4a0724c0020284114c050450020724c0020284524c05047ba4072480040284504805043b9b01ae910001ae5000020f8330058fbe00250fbe004740003061a43d0005047bc3872480020284504805043b5685fec00ad5047bc38504bb0c0724c0020284914c050450008724c0020284524c0504bbb2872440028284904407400000a5043b760504100405047b3a05fec107450491020724c0008284904c0504bbb2872400028284914005d43f041104103005047b7a8724c0028284524c05d47b16513451000504fbb5072480020284d048076440001740000095043b7a8504100085047bd8072480020284504805043bd80504fbb5072440020284d04405043be4072440020284134405043be401a6c00005d47f0121645b4401a48000076440001740000135047b2605d4bf04210492300724c0140284524c0724800201b49b480104914805047bbb8724c0020284504c0504fbc1872680020284d2680a14514e01a48100076440002106db04075000016105554805043bb70740001b35043b6d0504100085047bef072480088284504805d43f03b104134005d47b1e6504bb8b01ae900001ae510001ae1200020f8330058fbe00250fbe004740002031a47d000504bbd28724c0010284914c05047bd28504bb630724c0010284914c05d692001504bb640724c0010284914c05d6d20005d47b1e61b441440104504405d4bb1e7504fb8c01ae910001ae520001ae1300020f8330058fbe00250fbe004740001ea1a47d000504bbec0724c0010284914c05047bec0504bb650724c0010284914c05d712001504bb660724c0010284914c05d7520005d47b1e61b441440104104405d47b1e71b441440104104405d47b1e8504bb8d01ae900001ae510001ae1200020f8330058fbe00250fbe004740001ce1a43d0005047bc5872480010284504805043bc585047b67072480010284504805d7910015047b68072480010284504805d7d10005043b9201ae9000020f8330058fbe00250fbe0047400022b1a43d0005d8100005d4500015d8500021341a00076400021134210007640001a10421680154904407648000174000007264000001a487000154d1000764c000174000001284a04401a8120001a4c000016453680764400051a440000264400001a8500001a4500007400000c10460840104514c01049b4c05c4920005e452000104d30407500000c1a400000264000001a85a0001a45a0001a81b0001341400076400021134210007640001a10421500154904407648000174000007264000001a487000154d1000764c000174000001284a04401a8120001a4c000016453500764400051a440000264400001a8500001a4500007400000c10460840104514c0104984c05c4920005e452000104d30407500000c1a400000264000001a8540001a4590001a8180001341c00076400021134210007640001a10421700154904407648000174000007264000001a487000154d1000764c000174000001284a04401a8120001a4c000016453700764400051a440000264400001a8500001a4500007400000c10460840104514c01049d4c05c4920005e452000104d30407500000c1a400000264000001a85c0001a45c0001a81d0005043b9d05fee013a5fed113b5fee113c5047b8e01ae900001ae5100020f8330058fbe00250fbe004740001611a43d0005047bc6872480020284504805043b9381ae9000020f8330058fbe00250fbe004740001a91a43d0005d6900005d7100015d6d00021341e000764000211341b0007640001a1041b780154507007644000174000007264000001a4470001549c00076480001740000012845a7001a6910001a4c000016453780764400051a440000264400001a6d00001a7100007400000c1045a6c0104514c01049f4c05c4920005e452000104d30407500000c1a400000264000001a6de0001a71e0001a69f0005043bc685d47f00a264400001a447000504bb890724c0020284904c05d43f00a284524005d43f00a13410000764000231341b0007640001c5d43f00a1041b400154907007648000174000007264000001a487000154dc000764c0001740000012849a7001a6920001a7000005d4bf00a1649c480764800051a440000264400001a6d00001a7100007400000c1049a6c010492700104d17005c4d30005e4930001071c0407500000d1a400000264000005d6ff00a5d73f00a1a6910005d43f040104103005047b9e85feda13d5fedc13e5fedb13f504bb9001ae910001ae5200020f8330058fbe00250fbe004740000f41a47d000504bbc88724c0020284914c05047bef0504bbc88504fb080726800201b68068010693680726c0020286906c0726800201b68168010693680726c0020286906c05043b4607268004028413680504fbdc072680040284d06805043bdc0504fb0e072680040284d16805047b69072680020284526803f4134401a408000134100407640000a5043b5a05fec00b45047bdc050490008724c0040284914c0504bba987244004828490440740000065043b4e05fec109c5fec00a4504bba9872440048284904405043b7d072440048284124405d43b1531341000076400001360000005043b7d0504100085047bca872480040284504805043bca8724400201b440440104504405043bca8724800201b481480104904805043b528724c0020284114c050450020724c0020284524c05047ba0072480040284504805043b9901ae910001ae5000020f8330058fbe00250fbe004740001231a43d0005047bda072480020284504805043bda01a6c00005d47f0121645b4401a48000076440001740000135047b1205d4bf04210492300724c0140284524c0724800201b49b480104914805047bb98724c0020284504c0504fbbf872680020284d2680a14514e01a48100076440002106db04075000016105554805043bb7010596040750002ab240000005d43f00a164106c0764000025d43f00a134106c07640000a1041a6c05047b5905fec10b25c4100005049100f5e490000504bba807240001028491400740000055043b3c85fec0079504bba8072440010284904405043b86072440010284124405d43b1501341004076400001360000005043b8605041000f5c4100005d47f043104513005d4bf03c1f490480724c00011b4924c0104914805c452000134946407648000174000010134990001a4c1000764800025d4bf03d1b4d2640154936407648000174000007264c00001a487000155590007654000174000001284986401a6120001a653000104985005e491000104540405d4bf043104923005c4ff1f0114104c0724c00011b4104c0104124005c410000134916407648000174000010134990001a4c1000764800025d4bf03d1b4d2640154936407648000174000007264c00001a487000155190007650000174000001284986401a6120001a653000104984405e49000010511040106db0407500032f1af05000910000285ff100005ff110015ff120025ff130035ff3b0041aec5000910000101a43a0001a4790001a4b80001a4fe0001b4510405fed00005fed10011a43b00072440010284904401af52000920000101af9300059f050285d43c0005d47c0015d4bc0025d4fc0035defc004920000284af800001af05000910000505ff100005ff110015ff120025ff130035ff140045ff150055ff160065ff170075ff180085ff3b0091aec5000910000201a43a0001a4790001a4be0001a4c0000264c00001a4c70005d5100005d5500025d410002134100001a58000076400020134000007640001a10580540154160007640000174000008265800001a407000155c0000765c0001740000021a5c0000284135c01a4d00001a60000016418540764000031a400000264000007400000c1a4000001041340010410600105d46005c5d70005e417000106180407500000b1a400000264000001a5950001a4d40005d43f040104103007250002028ed05001a43b00042413580724c0020284504c01af51000920000201af9200059f050505d43c0005d47c0015d4bc0025d4fc0035d53c0045d57c0055d5bc0065d5fc0075d63c0085defc009920000504af800001af05000910000205ff100005ff110015ff120025ff3b0031aec5000910000001a43a0001a47e0001a480000264800001a4870005f4120005f4000015f4000021af50000920000001af9100059f050205d43c0005d47c0015d4bc0025defc003920000204af800001af05000910000285ff100005ff110015ff120025ff130035ff3b0041aec5000910000001a43a0001a4790001a4be000724c0040284504c01af51000920000001af9200059f050285d43c0005d47c0015d4bc0025d4fc0035defc004920000284af800001af05000910000385ff100005ff110015ff120025ff130035ff140045ff150055ff3b0061aec5000910000781a43a0001a4b90001a4fe0005d47f040104513001a500000265000001a5070005fed40085fec00095fec000a5053b0407254004028ed05401aebb0001ae5400020f8330058fbe00250fbe004740000165043b05872500020284115005053b0585d43b0085d47b00a4251044072400020284944001af52000920000781af9300059f050385d43c0005d47c0015d4bc0025d4fc0035d53c0045d57c0055defc006920000384af800001af05000910000585ff100005ff110015ff120025ff130035ff140045ff150055ff160065ff170075ff180085ff190095ff3b00a1aec5000910000401a43a0001a6790001a63e0005d47f00a264400001a4470007248002028ed04801a4bb0005d4d20005d5120015d5520025d4920035f4530005f4540015f4550025f4520035d4bf00a134920007648002c5d49900213492000764800225d4990025d4ff00a104924c05d4d90025d5190005d559001155925407658000174000007264800001a587000155d5000765c000174000001285945401a5160005f6540001a5800005d53f00a16516500765000055f6520015f6520021a440000264400007400000f5d519000105144c010514580105515805c5550005e515000105960407500000e5f6510005d47f00a5f6510015d47f00a5f6510021a44000026440000504100205d47f00a264400001a447000504bb020724c0020284904c05d4120005d4d20015d5120025d4920035f4500005f4530015f4540025f4520035d43f00a134100007640002c5d41900213410000764000225d4190025d4bf00a104104805d4990025d4d90005d519001155505007654000174000007264000001a547000155940007658000174000001285535001a4d50005f6530001a5400005d4ff00a164d54c0764c00055f6500015f6500021a400000264000007400000f5d4d9000104d3480104d3540105115405c5140005e4d4000105550407500000e5f6510005d43f00a5f6500015d43f00a5f6500021a400000264000001af40000920000401af9800059f050585d43c0005d47c0015d4bc0025d4fc0035d53c0045d57c0055d5bc0065d5fc0075d63c0085d67c0095defc00a920000584af8000047000000111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000003031323334353637383961626364656600000000000000200000000000000040cccccccccccc000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000af000000000000000000000000001364000000000000131c00000000000012fc0000000000001394000000000000133c'\n\nexport class PredicateAbi__factory {\n\n  static readonly abi = _abi\n  static readonly bin = _bin;\n\n  static createInstance(provider: Provider, configurables?: PredicateAbiConfigurables) {\n\n    const { abi, bin } = PredicateAbi__factory\n\n    const predicate = new Predicate(bin, provider, abi, configurables);\n\n    return predicate;\n\n  }\n\n}\n","import {\n  bn,\n  hexlify,\n  ScriptTransactionRequest,\n  TransactionRequest,\n  transactionRequestify,\n  TransactionRequestLike,\n  TransactionResponse,\n} from 'fuels';\nimport {\n  ITransaction,\n  ITransactionResume,\n  ITransactionService,\n  TransactionService,\n  TransactionStatus,\n} from '../api';\nimport {\n  IFormatTransfer,\n  TransferConstructor,\n  TransferFactory,\n  TransferInstanceError,\n} from './types';\nimport { Vault } from '../vault';\nimport { delay } from '../../test/utils';\nimport { BSAFEScriptTransaction } from './ScriptTransaction';\nimport { v4 as uuidv4 } from 'uuid';\nimport { Asset } from '../assets';\n\nconst { GAS_PRICE } = process.env;\n\n/**\n * `Transfer` are extension of ScriptTransactionRequest, to create and send transactions\n */\nexport class Transfer {\n  public name!: string;\n  public witnesses!: string[];\n  public BSAFEScript: ScriptTransactionRequest;\n  public BSAFETransaction!: ITransaction;\n  public transactionRequest: TransactionRequest;\n  public BSAFETransactionId!: string;\n\n  private vault!: Vault;\n  private service?: ITransactionService;\n\n  protected constructor({\n    vault,\n    name,\n    witnesses,\n    transactionRequest,\n    BSAFEScript,\n    service,\n    BSAFETransaction,\n    BSAFETransactionId,\n  }: TransferConstructor) {\n    this.name = name!;\n    this.vault = vault;\n    this.service = service;\n    this.witnesses = witnesses!;\n    this.BSAFEScript = BSAFEScript;\n    this.transactionRequest = transactionRequest;\n    this.BSAFETransaction = BSAFETransaction!;\n    this.BSAFETransactionId = BSAFETransactionId!;\n  }\n\n  /**\n   * Create a new transaction instance\n   *\n   * @param {TransferFactory} param - TransferFactory params\n   *        @param {string | ITransfer | ITransaction} transfer - Transaction ID or ITransfer or ITransaction\n   *        @param {IBSAFEAuth} auth - BSAFEAuth instance\n   *        @param {Vault} vault - Vault instance\n   *        @param {boolean} isSave - Save transaction on BSAFEAPI\n   * @returns return a new Transfer instance\n   */\n  public static async instance({\n    transfer,\n    auth,\n    vault,\n    isSave,\n  }: TransferFactory) {\n    const getHashTxId = (script: TransactionRequestLike, chainId: number) => {\n      const txHash = transactionRequestify(script).getTransactionId(chainId);\n      return txHash.slice(2);\n    };\n\n    const service = auth && new TransactionService(auth!);\n    const transactionName = `Random Vault Name - ${uuidv4()}`;\n\n    const isOld = typeof transfer === 'string';\n    if (isOld) {\n      if (!auth || !service) {\n        throw new Error(TransferInstanceError.REQUIRED_AUTH);\n      }\n\n      //if transfer min length is 36, is an transaction id\n      //else is an hash\n      const transaction =\n        transfer.length <= 36\n          ? await service.findByTransactionID(transfer)\n          : await service.findByHash(transfer);\n\n      const scriptTransactionRequest = await Transfer.formatTransaction({\n        name: transaction.name!,\n        vault: vault,\n        assets: transaction.assets,\n        witnesses: transaction.witnesses\n          .map((witness) => witness.signature)\n          .filter((witness) => !!witness),\n      });\n\n      return new Transfer({\n        vault,\n        service,\n        name: transaction.name!,\n        BSAFEScript: scriptTransactionRequest,\n        transactionRequest: transactionRequestify(scriptTransactionRequest),\n        witnesses: transaction.witnesses.map((witness) => witness.account),\n        BSAFETransactionId: transaction.id,\n        BSAFETransaction: transaction,\n      });\n    }\n\n    const isNew =\n      transfer &&\n      Object.entries(transfer).length <= 3 &&\n      Object.entries(transfer).length > 0 &&\n      'assets' in transfer &&\n      !!vault;\n    if (isNew) {\n      const assets = transfer.assets.map((assest) => ({\n        assetId: assest.assetId,\n        amount: assest.amount.toString(),\n        to: assest.to,\n      }));\n\n      const scriptTransaction = await Transfer.formatTransaction({\n        name: transfer.name ? transfer.name : `Random Vault Name - ${uuidv4()}`,\n        vault: vault,\n        assets: assets,\n      });\n\n      const txData = transactionRequestify(scriptTransaction);\n      const hashTxId = getHashTxId(txData, vault.provider.getChainId());\n\n      const BSAFETransaction =\n        auth &&\n        service &&\n        (await service.create({\n          assets: assets.map((asset) => ({\n            ...asset,\n            utxo: '',\n          })),\n          hash: hashTxId,\n          txData: txData,\n          name: transfer.name ?? transactionName,\n          status: TransactionStatus.AWAIT_REQUIREMENTS,\n          predicateAddress: vault.address.toString(),\n        }));\n\n      return new Transfer({\n        vault,\n        service,\n        BSAFETransaction,\n        name: transfer.name ?? transactionName,\n        transactionRequest: txData,\n        BSAFEScript: scriptTransaction,\n        witnesses: [],\n        BSAFETransactionId: BSAFETransaction?.id,\n      });\n    }\n\n    const isRequestLike =\n      transfer && Object.entries(transfer).length > 3 && 'type' in transfer;\n    if (isRequestLike) {\n      vault.populateTransactionPredicateData(transfer);\n      const txData = transactionRequestify(transfer);\n      const hashTxId = getHashTxId(txData, vault.provider.getChainId());\n      const assets = txData.getCoinOutputs().map((coin) => ({\n        assetId: coin.assetId.toString(),\n        to: coin.to.toString(),\n        amount: bn(coin.amount).format().toString(),\n        utxo: '',\n      }));\n\n      let transaction: ITransaction | undefined = undefined;\n      if (auth && service && isSave) {\n        transaction = await service.create({\n          assets,\n          hash: hashTxId,\n          txData: txData,\n          name: transactionName,\n          status: TransactionStatus.AWAIT_REQUIREMENTS,\n          predicateAddress: vault.address.toString(),\n        });\n      }\n\n      const witnesses =\n        transaction && transaction.witnesses\n          ? transaction.witnesses\n              .map((witness) => witness.signature)\n              .filter((signature) => !!signature)\n          : [];\n\n      return new Transfer({\n        vault,\n        service,\n        witnesses: witnesses,\n        name: transactionName,\n        transactionRequest: txData,\n        BSAFEScript: new ScriptTransactionRequest(), // TODO: Remove this one\n        BSAFETransaction: transaction,\n        BSAFETransactionId: transaction?.id,\n      });\n    }\n\n    throw new Error(TransferInstanceError.INVALID_PARAMETER);\n  }\n\n  /**\n   * Create the url to consult the fuel block explorer\n   *\n   * @returns link of transaction block\n   */\n  public makeBlockUrl(block: string | undefined) {\n    return block\n      ? `https://fuellabs.github.io/block-explorer-v2/transaction/${this.getHashTxId()}?providerUrl=${encodeURIComponent(\n          this.vault.provider.url,\n        )}`\n      : '';\n  }\n\n  // /**\n  //  * Generates and formats the transaction hash\n  //  *\n  //  * @param script Script of transaction request\n  //  * @param chainId Chain ID of provider\n  //  *\n  //  * @returns Hash of this transaction\n  //  */\n  // public static getHashTxId(script: TransactionRequestLike, chainId: number) {\n  //   const txHash = hashTransaction(transactionRequestify(script), chainId);\n  //   return txHash.slice(2);\n  // }\n\n  // public static toTransactionRequest(transaction: ITransaction) {\n  //   return BSAFEScriptTransaction.from({\n  //     script: `0x${transaction.hash}`,\n  //   });\n  // }\n\n  /**\n   * Generates and formats the transaction hash of transaction instance\n   *\n   * @returns Hash of this transaction\n   */\n  public getHashTxId() {\n    const txHash = this.transactionRequest.getTransactionId(\n      this.vault.provider.getChainId(),\n    );\n    return txHash.slice(2);\n  }\n\n  // /**\n  //  * Encapsulation of this transaction\n  //  *\n  //  * @returns this transaction\n  //  */\n  // public getScript() {\n  //   return this.BSAFEScript!;\n  // }\n\n  // /**\n  //  * Encapsulation of this transaction assets\n  //  *\n  //  * @returns this transaction assets\n  //  */\n  // public getAssets() {\n  //   return this.assets;\n  // }\n\n  /**\n   * Configure outputs and parameters of transaction instance.\n   *\n   * @returns this transaction configured and your hash\n   */\n  private static async formatTransaction({\n    vault,\n    assets,\n    witnesses,\n  }: IFormatTransfer & { vault: Vault }) {\n    const outputs = await Asset.assetsGroupByTo(assets);\n    const coins = await Asset.assetsGroupById(assets);\n    const transactionCoins = await Asset.addTransactionFee(\n      coins,\n      bn(GAS_PRICE),\n    );\n\n    // await this.validateBalance(coins, vault).catch((error) => {\n    //   return undefined;\n    // });\n    const _coins = await vault.getResourcesToSpend(transactionCoins);\n\n    // const _assets = _coins.length > 0 ? Asset.includeSpecificAmount(_coins, assets) : [];\n    const script_t = new BSAFEScriptTransaction();\n    await script_t.instanceTransaction(_coins, vault, outputs, witnesses);\n\n    return script_t;\n  }\n\n  // /**\n  //  * Validates all coins in the vault\n  //  *\n  //  * @param _coins - Vault to which this transaction belongs\n  //  * @returns If one of the assets is not enough, an error will be returned\n  //  */\n  // private static async validateBalance(_coins: IAssetGroupById, vault: Vault) {\n  //   const balances = await vault.getBalances();\n  //   const coins = await Asset.assetsGroupById(\n  //     balances.map((item) => {\n  //       return {\n  //         assetId: item.assetId,\n  //         amount: item.amount.format(),\n  //         to: '',\n  //       };\n  //     }),\n  //   );\n  //   Object.entries(_coins).map(([key, value]) => {\n  //     if (bn(coins[key]).lt(value)) {\n  //       throw new Error(`Insufficient balance for ${key}`);\n  //     }\n  //   });\n  // }\n\n  /**\n   * Using BSAFEauth or default send of predicate, send this transaction to chain\n   *\n   * @returns an resume for transaction\n   */\n  public async send() {\n    if (!this.service) {\n      const tx: TransactionRequest = transactionRequestify(this.BSAFEScript!);\n      const tx_est = await this.vault.provider.estimatePredicates(tx);\n      const encodedTransaction = hexlify(tx_est.toTransactionBytes());\n      const {\n        submit: { id: transactionId },\n      } = await this.vault.provider.operations.submit({ encodedTransaction });\n      return new TransactionResponse(transactionId, this.vault.provider);\n    }\n\n    this.BSAFETransaction = await this.service.findByTransactionID(\n      this.BSAFETransactionId,\n    );\n    switch (this.BSAFETransaction.status) {\n      case TransactionStatus.PENDING_SENDER:\n        await this.service.send(this.BSAFETransactionId);\n        break;\n\n      case TransactionStatus.PROCESS_ON_CHAIN:\n        return await this.wait();\n\n      case TransactionStatus.FAILED || TransactionStatus.SUCCESS:\n        break;\n\n      default:\n        break;\n    }\n    return {\n      ...this.BSAFETransaction.resume,\n      bsafeID: this.BSAFETransactionId,\n    };\n  }\n\n  /**\n   * Promise to return result of function\n   *\n   * todo: monitore send with an socket server\n   * Connect to api socket using name: [TRANSACTION_WAIT]:${transactionId}\n   * Await an message on event [TRANSACTION_WAIT]:${transactionId}\n   * and resolves a promise returns a result (returned on content of message)\n   *\n   * @returns an resume for transaction\n   */\n  public async wait() {\n    if (!this.service) {\n      throw Error('Implement this.');\n    }\n\n    let transaction = await this.service.findByTransactionID(\n      this.BSAFETransactionId,\n    );\n    while (\n      transaction.status !== TransactionStatus.SUCCESS &&\n      transaction.status !== TransactionStatus.FAILED\n    ) {\n      await delay(this.vault.transactionRecursiveTimeout); // todo: make time to dynamic\n      transaction = await this.service.findByTransactionID(\n        this.BSAFETransactionId,\n      );\n\n      if (transaction.status == TransactionStatus.PENDING_SENDER)\n        await this.send();\n\n      if (transaction.status == TransactionStatus.PROCESS_ON_CHAIN)\n        await this.service.verify(this.BSAFETransactionId);\n    }\n\n    const result: ITransactionResume = {\n      ...transaction.resume,\n      status: transaction.status,\n    };\n    return result;\n  }\n}\n","import axios, { AxiosInstance } from 'axios';\nimport { Provider, Wallet } from 'fuels';\nimport { IAuthService, IBSAFEAuth, IBSAFEAuthPayload } from './types';\n\nimport { FuelWalletLocked } from '@fuel-wallet/sdk';\nimport { v4 as uuidv4 } from 'uuid';\nimport { ITransaction } from '../transactions';\nimport { defaultConfig } from '../../../configurables';\n\n// woking to local node just fine\nexport class AuthService implements IAuthService {\n  private client: AxiosInstance;\n  private payloadSession: IBSAFEAuthPayload;\n  private signature?: string;\n  public BSAFEAuth?: IBSAFEAuth;\n\n  protected constructor(payload: IBSAFEAuthPayload) {\n    this.client = axios.create({\n      baseURL: defaultConfig['API_URL'],\n    });\n    this.payloadSession = payload;\n  }\n\n  static async create(user: string, provider: string) {\n    const { data } = await axios\n      .create({\n        baseURL: defaultConfig['API_URL'],\n      })\n      .post('/user', {\n        address: user,\n        provider,\n      });\n\n    return new AuthService({\n      address: user,\n      hash: uuidv4(),\n      createdAt: new Date().toISOString(),\n      provider,\n      encoder: 'fuel',\n      user_id: data.id,\n    });\n  }\n\n  //todo: verify date of payloadSession\n  async createSession() {\n    if (!this.signature) throw new Error('Signature not found');\n    const { address } = this.payloadSession;\n\n    const { data } = await this.client.post('/auth/sign-in', {\n      ...this.payloadSession,\n      signature: this.signature,\n    });\n\n    const result: IBSAFEAuth = {\n      address,\n      token: data.accessToken,\n    };\n\n    this.client.defaults.headers.common['Authorization'] = data.accessToken;\n    this.client.defaults.headers.common['Signeraddress'] = address;\n\n    this.BSAFEAuth = result;\n\n    return result;\n  }\n\n  async signerByPk(pk: string) {\n    const signer = Wallet.fromPrivateKey(\n      pk,\n      await Provider.create(defaultConfig['PROVIDER']!),\n    );\n    const msg = await signer.signMessage(JSON.stringify(this.payloadSession));\n    this.signature = msg;\n  }\n\n  async signerByAccount(wallet: FuelWalletLocked) {\n    const msg = await wallet.signMessage(JSON.stringify(this.payloadSession));\n    this.signature = msg;\n  }\n\n  async signTransaction(\n    wallet: FuelWalletLocked,\n    BSAFETransactionId: string,\n    approve?: boolean,\n  ) {\n    const { data } = await this.client.get<ITransaction>(\n      `/transaction/${BSAFETransactionId}`,\n    );\n    const msg = await wallet.signMessage(data.hash);\n\n    await this.client\n      .put(`/transaction/signer/${BSAFETransactionId}`, {\n        account: wallet.address.toString(),\n        signer: msg,\n        confirm: approve ?? true,\n      })\n      .then(() => true)\n      .catch(() => false);\n  }\n}\n","const {\n  PROVIDER,\n  API_URL,\n  BSAFE_URL,\n  ENCODER,\n  GAS_PRICE,\n  GAS_LIMIT,\n  REFETCH_TIMEOUT,\n} = process.env;\n\nexport const defaultConfig = {\n  PROVIDER,\n  API_URL,\n  BSAFE_URL,\n  ENCODER,\n  GAS_PRICE,\n  GAS_LIMIT,\n  REFETCH_TIMEOUT,\n};\n\nexport type DefaultConfigurables = typeof defaultConfig;\nexport type DefaultConfigurablesKeys = keyof DefaultConfigurables;\n\nexport const BSafe = {\n  setup: (params: Partial<DefaultConfigurables>) => {\n    const configurableKeys = Object.keys(params);\n\n    configurableKeys.forEach((key) => {\n      if (key in defaultConfig) {\n        defaultConfig[key] = params[key]!;\n      }\n    });\n  },\n};\n","import axios, { AxiosInstance } from 'axios';\nimport { IBSAFEAuth } from './auth/types';\nimport { defaultConfig } from '../../configurables';\n\nexport class Api {\n  public client: AxiosInstance;\n\n  constructor(auth: IBSAFEAuth) {\n    this.client = axios.create({\n      baseURL: defaultConfig['API_URL'],\n      headers: {\n        Authorization: auth.token,\n        Signeraddress: auth.address,\n      },\n    });\n  }\n}\n","import { Api } from '../api';\nimport { IBSAFEAuth } from '../auth/types';\nimport {\n  ICreateTransactionPayload,\n  ITransaction,\n  ITransactionService,\n} from './types';\n\nexport class TransactionService extends Api implements ITransactionService {\n  constructor(auth: IBSAFEAuth) {\n    super(auth);\n  }\n\n  public async create(payload: ICreateTransactionPayload) {\n    try {\n      const { data } = await this.client.post<ITransaction>(\n        '/transaction',\n        payload,\n      );\n\n      return data;\n    } catch (e) {\n      throw new Error('ERRO AO CRIAR');\n    }\n  }\n\n  public async findByHash(hash: string) {\n    const { data } = await this.client.get<ITransaction>(\n      `/transaction/by-hash/${hash}`,\n    );\n\n    return data;\n  }\n\n  public async findByTransactionID(transactionId: string) {\n    const { data } = await this.client.get<ITransaction>(\n      `/transaction/${transactionId}`,\n    );\n\n    return data;\n  }\n\n  public async sign(\n    BSAFETransactionId: string,\n    account: string,\n    signer: string,\n    approve?: boolean,\n  ) {\n    const { data } = await this.client.put(\n      `/transaction/signer/${BSAFETransactionId}`,\n      {\n        account,\n        signer,\n        confirm: approve ?? true,\n      },\n    );\n\n    return data;\n  }\n\n  public async send(BSAFETransactionId: string) {\n    const { data } = await this.client.post(\n      `/transaction/send/${BSAFETransactionId}`,\n    );\n\n    return data;\n  }\n\n  public async verify(BSAFETransactionId: string) {\n    const { data } = await this.client.post(\n      `/transaction/verify/${BSAFETransactionId}`,\n    );\n\n    return data;\n  }\n}\n","import { Operation, TransactionRequest } from 'fuels';\nimport { IAssetTransaction, ITransferAsset } from '../../assets';\n\nexport enum SortOption {\n  ASC = 'ASC',\n  DESC = 'DESC',\n}\n\nexport enum TransactionStatus {\n  AWAIT_REQUIREMENTS = 'await_requirements', // -> AWAIT SIGNATURES\n  PENDING_SENDER = 'pending_sender', // -> AWAIT SENDER, BEFORE AWAIT STATUS\n  PROCESS_ON_CHAIN = 'process_on_chain', // -> AWAIT DONE ON CHAIN\n  SUCCESS = 'success', // -> SENDED\n  DECLINED = 'declined', // -> DECLINED\n  FAILED = 'failed', // -> FAILED\n}\n\nexport interface ICreateTransactionPayload {\n  predicateAddress: string; // ADDRESS OF PREDICATE\n  name?: string;\n  hash: string; // HASH OF TRANSACTION\n  txData: TransactionRequest;\n  status: TransactionStatus;\n  assets: ITransferAsset[];\n  sendTime?: Date;\n  gasUsed?: string;\n}\n\nexport enum WitnessStatus {\n  REJECTED = 'REJECTED',\n  DONE = 'DONE',\n  PENDING = 'PENDING',\n}\n\nexport interface IWitnesses {\n  id: string;\n  signature: string;\n  account: string;\n  status: WitnessStatus;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface GetTransactionParams {\n  predicateId?: string[];\n  to?: string;\n  hash?: string;\n  status?: TransactionStatus[];\n  perPage?: number;\n  page?: number;\n  orderBy?: string;\n  sort?: SortOption;\n}\n\nexport enum TransactionProcessStatus {\n  SUCCESS = 'SuccessStatus',\n  SQUIZED = 'SqueezedOutStatus',\n  SUBMITED = 'SubmittedStatus',\n  FAILED = 'FailureStatus',\n}\n\nexport interface ITransactionResume {\n  hash: string;\n  totalSigners: number;\n  requiredSigners: number;\n  predicate: {\n    id: string;\n    address: string;\n  };\n  outputs: ITransferAsset[];\n  status: TransactionStatus;\n  witnesses?: string[];\n  gasUsed?: string;\n  sendTime?: Date;\n}\n\nexport interface ITransactionSummary {\n  origin: string;\n  name: string;\n  image?: string;\n  operations?: Operation[];\n}\n\nexport interface ITransaction extends ICreateTransactionPayload {\n  id: string;\n  name: string;\n  createdAt: string;\n  updatedAt: string;\n  predicateId: string;\n  witnesses: IWitnesses[];\n  resume: ITransactionResume; // RESULT\n  assets: IAssetTransaction[];\n  summary?: ITransactionSummary;\n}\n\nexport interface ITransactionService {\n  create: (payload: ICreateTransactionPayload) => Promise<ITransaction>;\n  findByHash: (hash: string) => Promise<ITransaction>;\n  findByTransactionID: (transactionId: string) => Promise<ITransaction>;\n  sign: (\n    BSAFETransactionId: string,\n    account: string,\n    signer: string,\n    approve?: boolean,\n  ) => Promise<ITransaction>;\n  send: (BSAFETransactionId: string) => Promise<ITransactionResume>;\n  verify: (BSAFETransactionId: string) => Promise<ITransactionResume>;\n}\n","import { Api } from '../api';\nimport { IBSAFEAuth } from '../auth/types';\nimport { GetTransactionParams } from '../transactions';\nimport { IPredicatePayload, IPredicateService } from './types';\n\nexport class PredicateService extends Api implements IPredicateService {\n  constructor(auth: IBSAFEAuth) {\n    super(auth);\n  }\n\n  public async create(payload: IPredicatePayload) {\n    const { data } = await this.client.post('/predicate', payload);\n\n    return data;\n  }\n\n  public async findByAddress(predicateAddress: string) {\n    const { data } = await this.client.get(\n      `/predicate/by-address/${predicateAddress}`,\n    );\n    return data;\n  }\n\n  public async findById(predicateId: string) {\n    const { data } = await this.client.get(`/predicate/${predicateId}`);\n\n    return data;\n  }\n\n  public async hasReservedCoins(predicateAddress: string) {\n    const { data } = await this.client.get(\n      `/predicate/reserved-coins/${predicateAddress}`,\n    );\n\n    return data;\n  }\n\n  public async listPredicateTransactions(params?: GetTransactionParams) {\n    const { data } = await this.client.get('/transaction', {\n      params: {\n        ...params,\n      },\n    });\n\n    return data;\n  }\n}\n","import {\n  ScriptTransactionRequest,\n  TransactionRequest,\n  TransactionRequestLike,\n  TransactionStatus,\n} from 'fuels';\nimport { ITransferAsset } from '../assets/types';\nimport {\n  ITransaction,\n  ITransactionResume,\n  ITransactionService,\n  IWitnesses,\n} from '../api/transactions';\nimport { Vault } from '../vault';\nimport { IBSAFEAuth } from '../api';\n\nexport interface TransferConstructor {\n  name: string;\n  service?: ITransactionService;\n  witnesses: string[];\n  transactionRequest: TransactionRequest;\n  BSAFEScript: ScriptTransactionRequest;\n  BSAFETransaction?: ITransaction;\n  BSAFETransactionId?: string;\n  vault: Vault;\n}\n\nexport type TransferFactoryParam =\n  | string // id e txhash\n  | IFormatTransfer // payload\n  | TransactionRequestLike // request like formatado da fuel\n  | ITransaction;\n\nexport interface TransferFactory {\n  auth?: IBSAFEAuth;\n  transfer: TransferFactoryParam;\n  vault: Vault;\n  isSave?: boolean;\n}\n\nexport interface IPayloadTransfer {\n  assets: ITransferAsset[];\n  witnesses?: string[];\n  name?: string;\n}\n\nexport interface IFormatTransfer {\n  name: string;\n  assets: ITransferAsset[];\n  witnesses?: string[];\n}\n\nexport interface IInstanceTransfer {\n  txData: TransactionRequest;\n  hash: string;\n}\n\nexport interface IRequiredWitnesses {\n  required: number;\n  signed: number;\n  witnesses: IWitnesses[];\n}\n\nexport interface ITransferResult {\n  status: TransactionStatus;\n  block?: string;\n  witnesses?: string[];\n  outputs?: ITransferAsset[];\n  bsafeID?: string;\n  fee?: string;\n  gasUsed?: string;\n}\n\nexport interface ISendTransaction {\n  status: string;\n  block: string;\n  gasUsed: string;\n}\n\nexport enum TransferInstanceError {\n  REQUIRED_AUTH = 'Required credentials',\n  INVALID_PARAMETER = 'Invalid instance parameters',\n}\n\nexport interface ITransfer {\n  send(): void;\n  getScript(): TransactionRequest;\n  wait(): Promise<ITransactionResume | undefined>;\n  getAssets(): ITransferAsset[];\n}\n","// -> valid accounts just to network http://localhost:4000/graphql\nexport const accounts = {\n  FULL: {\n    account:\n      '0x94ffcc53b892684acefaebc8a3d4a595e528a8cf664eeb3ef36f1020b0809d0d',\n    address: 'fuel1jnluc5acjf5y4nh6a0y28499jhjj32x0ve8wk0hndugzpvyqn5xsfsfzly',\n    privateKey:\n      '0xa449b1ffee0e2205fa924c6740cc48b3b473aa28587df6dab12abc245d1f5298',\n  },\n  STORE: {\n    account:\n      '0x53de37ae51fcfecb17ee3589f68904ac75bf5ec109edeb1065ccb63145287da6',\n    address: 'fuel1200r0tj3lnlvk9lwxkyldzgy436m7hkpp8k7kyr9ejmrz3fg0knqndhwm6',\n    privateKey:\n      '0x61a006b78a6e9eb5aeb11df25e6444be281893875ae5fdc5fa4a0f4702995cb7',\n  },\n  USER_1: {\n    account:\n      '0x92dffc873b56f219329ed03bb69bebe8c3d8b041088574882f7a6404f02e2f28',\n    address: 'fuel1jt0lepem2mepjv576qamdxltarpa3vzppzzhfzp00fjqfupw9u5q9gyphu',\n    privateKey:\n      '0xa349d39f614a3085b7f7f8cef63fd5189136924fc1238e6d25ccdaa43a901cd0',\n  },\n  USER_2: {\n    account:\n      '0x456bdaffaf74fe03521754ac445d148033c0c6acf7d593132c43f92fdbc7324c',\n    address: 'fuel1g44a4la0wnlqx5sh2jkyghg5sqeup34v7l2exyevg0ujlk78xfxqr6ywcm',\n    privateKey:\n      '0x139f2cd8db62a9d64c3ed4cdc804f1fb53be98d750cd1432a308b34a42d8dcc7',\n  },\n  USER_3: {\n    account:\n      '0x639880ece7753a32e09164d14dad7436c57737e567f18b98f6ee30fec6b247ec',\n    address: 'fuel1vwvgpm88w5ar9cy3vng5mtt5xmzhwdl9vlcchx8kacc0a34jglkqjnvpjz',\n    privateKey:\n      '0x40aaca08dac67fa0c22b51794f652e20173970cd05a8797f2d3e8393cfc44211',\n  },\n  USER_4: {\n    account:\n      '0xfd8c520ef8caff0ad3289aa64acecd4ef86ac8f643fd9b76bf2d163a86a66716',\n    address: 'fuel1lkx9yrhcetls45egn2ny4nkdfmux4j8kg07eka4l95tr4p4xvutqmvhl2l',\n    privateKey:\n      '0xb58ad4fb072290d03fc2d81cd7534e9bf7360ccad8a48d2799b60bab357255da',\n  },\n  USER_5: {\n    account:\n      '0x8247104854dd733cb475901d55047f57cb3c8cafe3a9f7233de3325b8bf56a5c',\n    address: 'fuel1sfr3qjz5m4enedr4jqw42prl2l9ner90uw5lwgeauve9hzl4dfwqxhyn83',\n    privateKey:\n      '0x4256a670740031e4e7cb7216c9fe8921a4485c187686b7ab0ae7c317d7de0a22',\n  },\n};\n\nexport type IAccountKeys = keyof typeof accounts;\n\nexport type IDefaultAccount = {\n  address: string;\n  account?: string;\n  privateKey?: string;\n};\n","export const assets = {\n  ETH: '0x0000000000000000000000000000000000000000000000000000000000000000',\n  DAI: '0x0d9be25f6bef5c945ce44db64b33da9235fbf1a9f690298698d899ad550abae1',\n  sETH: '0x1bdeed96ee1e5eca0bd1d7eeeb51d03b0202c1faf764fec1b276ba27d5d61d89',\n};\n","export const delay = (ms: number): Promise<void> => {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n};\n","import { Provider } from 'fuels';\n\nconst { PROVIDER } = process.env;\n\nexport class LocalProvider extends Provider {\n  constructor() {\n    super(PROVIDER!);\n  }\n}\n","import { Wallet } from 'fuels';\nimport { accounts } from '../mocks/accounts';\nimport { LocalProvider } from './provider';\n\nexport const rootWallet = Wallet.fromPrivateKey(\n  accounts['FULL'].privateKey,\n  new LocalProvider(),\n);\n","import { BN, WalletUnlocked, bn } from 'fuels';\n\nimport { assets } from '../mocks';\nimport { Vault } from '../../src/vault/Vault';\n\nconst { GAS_PRICE, GAS_LIMIT } = process.env;\n\nexport const txParams = {\n  gasPrice: bn(GAS_PRICE),\n  gasLimit: bn(GAS_LIMIT),\n};\n\nexport const sendPredicateCoins = async (\n  predicate: Vault,\n  amount: BN,\n  asset: 'ETH' | 'DAI' | 'sETH',\n  rootWallet: WalletUnlocked,\n) => {\n  const deposit = await rootWallet.transfer(\n    predicate.address,\n    amount,\n    assets[asset],\n    txParams,\n  );\n  await deposit.wait();\n};\n","import { Wallet, Address } from 'fuels';\nimport { IBSAFEAuth, TransactionService } from '../../src/api';\n\nimport { accounts } from '../mocks';\nimport { LocalProvider } from './provider';\n\nexport const signin = async (\n  tx_hash: string,\n  account: 'FULL' | 'USER_1' | 'USER_2' | 'USER_3' | 'USER_4' | 'USER_5',\n  auth?: IBSAFEAuth,\n  BSAFETransactionId?: string,\n) => {\n  const fuelProvider = new LocalProvider();\n\n  const signer = Wallet.fromPrivateKey(\n    accounts[account].privateKey,\n    fuelProvider,\n  );\n  const tx = await signer.signMessage(tx_hash);\n  if (!!auth && BSAFETransactionId) {\n    const acc = Address.fromString(accounts[account].address).toString();\n    const serviceTransactions = new TransactionService(auth);\n    return await serviceTransactions.sign(BSAFETransactionId, acc, tx);\n  }\n  return tx;\n};\n","import { Provider, bn } from 'fuels';\nimport { IPayloadVault, Vault } from '../../src/vault';\nimport { rootWallet } from './rootWallet';\nimport { sendPredicateCoins } from './sendCoins';\nimport { IBSAFEAuth } from '../../src/api';\n\nexport const newVault = async (\n  signers: string[],\n  fuelProvider: Provider,\n  auth?: IBSAFEAuth,\n) => {\n  const VaultPayload: IPayloadVault = {\n    configurable: {\n      SIGNATURES_COUNT: 3,\n      SIGNERS: signers,\n      network: fuelProvider.url,\n      chainId: fuelProvider.getChainId(),\n    },\n    provider: fuelProvider,\n    BSAFEAuth: auth,\n  };\n  const vault = await Vault.create(VaultPayload);\n  await sendPredicateCoins(vault!, bn(1_000_000_000), 'sETH', rootWallet);\n  await sendPredicateCoins(vault!, bn(1_000_000_000), 'ETH', rootWallet);\n  return vault;\n};\n","import { arrayify, Predicate, Provider } from 'fuels';\n\nimport {\n  IBSAFEAuth,\n  IListTransactions,\n  IPredicate,\n  IPredicateService,\n  PredicateService,\n} from '../api';\nimport {\n  IBSAFEApi,\n  IBSAFEIncludeTransaction,\n  IConfVault,\n  IPayloadVault,\n  IVault,\n} from './types';\nimport { makeHashPredicate, makeSubscribers } from './helpers';\nimport { Transfer } from '../transfers';\nimport { v4 as uuidv4 } from 'uuid';\nimport { AddressUtils } from '../address/Address';\nimport { PredicateAbi__factory } from '../predicates';\n\n/**\n * `Vault` are extension of predicates, to manager transactions, and sends.\n */\nexport class Vault extends Predicate<[]> implements IVault {\n  // private readonly RECURSIVE_TIMEOUT = 10000;\n\n  private bin: string;\n  private abi: { [name: string]: unknown };\n  private api!: IPredicateService;\n  private auth!: IBSAFEAuth;\n  private configurable: IConfVault;\n\n  public name!: string;\n  //@ts-ignore\n  public BSAFEVault!: IPredicate;\n  public BSAFEVaultId!: string;\n  public description?: string;\n  public transactionRecursiveTimeout: number;\n\n  protected constructor({\n    configurable,\n    provider,\n    abi,\n    bytecode,\n    name,\n    description,\n    BSAFEVaultId,\n    BSAFEVault,\n    BSAFEAuth,\n    transactionRecursiveTimeout,\n  }: IPayloadVault) {\n    const _abi = abi ? JSON.parse(abi) : PredicateAbi__factory.abi;\n    const _bin = bytecode ? bytecode : PredicateAbi__factory.bin;\n    const _network = configurable.network;\n    const _chainId = configurable.chainId;\n    Vault.validations(configurable);\n\n    const _configurable = Vault.makePredicate(configurable);\n\n    super(arrayify(_bin), provider, _abi, _configurable);\n\n    this.bin = _bin;\n    this.abi = _abi;\n    this.configurable = this.configurable = {\n      HASH_PREDICATE: _configurable.HASH_PREDICATE as number[],\n      SIGNATURES_COUNT: _configurable.SIGNATURES_COUNT as number,\n      SIGNERS: _configurable.SIGNERS as string[],\n      network: _network,\n      chainId: _chainId,\n    };\n    this.provider = provider;\n    this.name = name ? name : `Random Vault Name - ${uuidv4()}`;\n    this.description = description ? description : undefined;\n    this.BSAFEVaultId = BSAFEVaultId!;\n    this.transactionRecursiveTimeout = transactionRecursiveTimeout\n      ? transactionRecursiveTimeout\n      : 1000;\n    this.BSAFEVault = BSAFEVault!;\n    this.auth = BSAFEAuth!;\n  }\n\n  /**\n   *\n   * Validate creation parameters.\n   *\n   * @param configurable - The parameters of signature requirements.\n   * @returns thire is no return, but if an error is detected it is trigged\n   */\n  private static validations(configurable: IConfVault) {\n    const { SIGNATURES_COUNT, SIGNERS } = configurable;\n    if (!SIGNATURES_COUNT || Number(SIGNATURES_COUNT) == 0) {\n      throw new Error('SIGNATURES_COUNT is required must be granter than zero');\n    }\n    if (!SIGNERS || SIGNERS.length === 0) {\n      throw new Error('SIGNERS must be greater than zero');\n    }\n    if (SIGNERS.length < Number(SIGNATURES_COUNT)) {\n      throw new Error('Required Signers must be less than signers');\n    }\n  }\n\n  /**\n   * Creates an instance of the Predicate class.\n   *\n   * @param configurable - The parameters of signature requirements.\n   *      @param HASH_PREDICATE - Hash to works an unic predicate, is not required, but to instance old predicate is an number array\n   *      @param SIGNATURES_COUNT - Number of signatures required of predicate\n   *      @param SIGNERS - Array string of predicate signers\n   * @param abi - The JSON abi to BSAFE multisig.\n   * @param bytecode - The binary code of preficate BSAFE multisig.\n   * @param transactionRecursiveTimeout - The time to refetch transaction on BSAFE API.\n   * @param BSAFEAuth - The auth to BSAFE API.\n   *\n   * @returns an instance of Vault\n   **/\n  static async create(params: IPayloadVault | IBSAFEApi) {\n    const isWithApi =\n      ('predicateAddress' in params || 'id' in params) &&\n      'address' in params &&\n      'token' in params;\n    const isNew = 'configurable' in params && 'provider';\n    if (isWithApi) {\n      const { id, predicateAddress, token, address } = params;\n      const hasId = 'id' in params && id;\n      if (predicateAddress == undefined && id == undefined) {\n        throw new Error('predicateAddress or BSAFEPredicateId is required');\n      }\n\n      const api = new PredicateService({\n        address,\n        token,\n      });\n\n      const result = hasId\n        ? await api.findById(id)\n        : await api.findByAddress(predicateAddress!);\n\n      if (!result) {\n        throw new Error('BSAFEVault not found');\n      }\n\n      const {\n        configurable,\n        abi,\n        bytes,\n        name,\n        description,\n        id: BSAFEVaultId,\n        provider,\n      } = result;\n      const vault = new Vault({\n        configurable: JSON.parse(configurable),\n        provider: await Provider.create(provider),\n        abi,\n        bytecode: bytes,\n        name,\n        description,\n        BSAFEVaultId,\n        BSAFEVault: result,\n      });\n\n      vault.api = api;\n      vault.auth = {\n        address,\n        token,\n      };\n\n      return vault;\n    } else if (isNew) {\n      const {\n        configurable,\n        provider,\n        name,\n        description,\n        abi,\n        bytecode,\n        BSAFEAuth,\n        BSAFEVaultId,\n      } = params;\n      const aux = new Vault({\n        configurable,\n        provider,\n        abi,\n        bytecode,\n        name,\n        description,\n        BSAFEAuth,\n        BSAFEVaultId,\n      });\n      if (BSAFEAuth) {\n        const _auth = BSAFEAuth;\n        aux.auth = _auth;\n        aux.api = new PredicateService(_auth);\n        await aux.createOnService();\n      }\n\n      return aux;\n    } else {\n      throw new Error('Required props to instance a vault');\n    }\n  }\n\n  /**\n   * To use bsafe API, auth is required\n   *\n   * @returns if auth is not defined, throw an error\n   */\n  private verifyAuth() {\n    if (!this.auth) {\n      throw new Error('Auth is required');\n    }\n  }\n\n  /**\n   * Send a caller to BSAFE API to save predicate\n   * Set BSAFEVaultId and BSAFEVault\n   *\n   *\n   * @returns if auth is not defined, throw an error\n   */\n  private async createOnService() {\n    this.verifyAuth();\n    const { id, ...rest } = await this.api.create({\n      name: this.name,\n      description: this.description,\n      predicateAddress: this.address.toString(),\n      minSigners: this.configurable.SIGNATURES_COUNT,\n      addresses: AddressUtils.hex2string(this.configurable.SIGNERS),\n      bytes: this.bin,\n      abi: JSON.stringify(this.abi),\n      configurable: JSON.stringify(this.configurable),\n      provider: this.provider.url,\n    });\n    this.BSAFEVault = {\n      ...rest,\n      id,\n    };\n    this.BSAFEVaultId = id;\n  }\n\n  /**\n   * Make configurable of predicate\n   *\n   * @param configurable - The parameters of signature requirements.\n   * @returns an formatted object to instance a new predicate\n   */\n  private static makePredicate(configurable: IConfVault) {\n    const _configurable: { [name: string]: unknown } = {\n      SIGNATURES_COUNT: configurable.SIGNATURES_COUNT,\n      SIGNERS: makeSubscribers(configurable.SIGNERS),\n      HASH_PREDICATE: configurable.HASH_PREDICATE ?? makeHashPredicate(),\n    };\n\n    return _configurable;\n  }\n\n  /**\n   * Include new transaction to vault\n   *\n   * @param {IFormatTransfer} param - IFormatTransaction or TransactionRequestLike\n   * @param {TransactionRequestLike} param - IFormatTransaction or TransactionRequestLike\n   * @returns return a new Transfer instance\n   */\n  public async BSAFEIncludeTransaction(param: IBSAFEIncludeTransaction) {\n    return Transfer.instance({\n      auth: this.auth,\n      vault: this,\n      transfer: param,\n      isSave: true,\n    });\n  }\n\n  /**\n   * Return an list of transaction of this vault\n   *\n   * @returns an transaction list\n   *\n   * TODO:\n   * return a complete transaction, without instance\n   * implement default pagintation ({perPage: 10, page: 1, orderBy: 'createdAt', order: 'DESC'})\n   */\n  public async BSAFEGetTransactions(params?: IListTransactions) {\n    this.verifyAuth();\n\n    const transactions = await this.api.listPredicateTransactions({\n      predicateId: [this.BSAFEVaultId],\n      ...params,\n    });\n    return Promise.all(\n      transactions.map((transaction) => ({\n        resume: transaction.resume,\n        witnesses: transaction.witnesses,\n      })),\n    );\n  }\n\n  /**\n   * Return an list of transaction of this vault\n   * @param transactionId - The transaction id on BSAFEApi\n   *\n   * @returns an transaction list\n   *\n   *\n   * TODO:\n   * split this function in others:\n   * - create a class extended of TransactionRequest, and implement the save in BSAFEApi method\n   *\n   * - newTransaction -> (IPayload) => TransactionRequest\n   *\n   * - BSAFETransaction -> (TransactionRequest | string[bsafeId, hash]) => TransactionRequest\n   *       - Save the transaction in BSAFEApi if it is of type TransactionRequest\n   *       - If the vault has not been instantiated with the Auth, it doesn't save in BSAFEApi\n   *       - If it receives a string, it fetches from the API and returns the TransactionRequest\n   */\n  public async BSAFEGetTransaction(transactionId: string) {\n    return Transfer.instance({\n      vault: this,\n      auth: this.auth,\n      transfer: transactionId,\n    });\n  }\n\n  /**\n   * Return abi of this vault\n   *\n   * @returns an abi\n   */\n  public getAbi() {\n    return this.abi;\n  }\n\n  /**\n   * Return binary of this vault\n   *\n   * @returns an binary\n   */\n  public getBin() {\n    return this.bin;\n  }\n\n  /**\n   * Return this vault configurables state\n   *\n   * @returns configurables [signers, signers requested, hash]\n   */\n  public getConfigurable() {\n    return this.configurable;\n  }\n}\n","import { Address, B256Address, ZeroBytes32 } from 'fuels';\n\nexport const defaultValues: { [name: string]: string } = {\n  signature:\n    '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n  address: '0x0000000000000000000000000000000000000000000000000000000000000000',\n};\n\nexport const makeHashPredicate = () => Address.fromRandom().toB256();\n\nexport const makeSubscribers = (subscribers: string[]) => {\n  const array: B256Address[] = Array(10).fill(ZeroBytes32);\n  subscribers.forEach((value, index) => {\n    array[index] = Address.fromString(value).toB256();\n  });\n  return array;\n};\n","import { assets } from '../../test/mocks';\nimport { Address } from 'fuels';\n\nexport class AddressUtils {\n  static hex2string(add: string[]) {\n    return add\n      .filter((item: string) => item != assets['ETH'])\n      .map((item: string) => {\n        return Address.fromB256(item).toString();\n      });\n  }\n}\n","import {\n  Address,\n  InputType,\n  Predicate,\n  Resource,\n  ScriptTransactionRequest,\n  arrayify,\n  hexlify,\n  BN,\n  BytesLike,\n  bn,\n} from 'fuels';\nimport { transactionScript } from './helpers';\nimport { IAssetGroupByTo } from '../assets';\n\nconst { GAS_LIMIT, GAS_PRICE } = process.env;\n\ninterface BSAFEScriptTransactionConstructor {\n  gasPrice: BN;\n  gasLimit: BN;\n  script: BytesLike;\n}\n\nexport class BSAFEScriptTransaction extends ScriptTransactionRequest {\n  constructor(\n    { script, gasLimit, gasPrice }: BSAFEScriptTransactionConstructor = {\n      script: transactionScript,\n      gasPrice: bn(GAS_PRICE),\n      gasLimit: bn(GAS_LIMIT),\n    },\n  ) {\n    super({\n      gasPrice,\n      gasLimit,\n      script,\n    });\n  }\n\n  public async instanceTransaction(\n    _coins: Resource[],\n    vault: Predicate<[]>,\n    outputs: IAssetGroupByTo,\n    witnesses?: string[],\n  ) {\n    Object.entries(outputs).map(([, value]) => {\n      this.addCoinOutput(\n        Address.fromString(value.to),\n        value.amount,\n        value.assetId,\n      );\n    });\n\n    //todo: invalidate used coins [make using bsafe api assets?]\n    this.addResources(_coins);\n\n    this.inputs?.forEach((input) => {\n      if (\n        input.type === InputType.Coin &&\n        hexlify(input.owner) === vault.address.toB256()\n      ) {\n        input.predicate = arrayify(vault.bytes);\n        input.predicateData = arrayify(vault.predicateData);\n      }\n    });\n\n    if (witnesses) {\n      this.witnesses = [...this.witnesses, ...witnesses];\n    }\n  }\n}\n","import { Signer, arrayify, hashMessage } from 'fuels';\nimport { defaultValues } from '../vault/helpers';\n\nexport const transactionScript = arrayify(\n  '0x9000000447000000000000000000003c5dfcc00110fff3001a485000910000201a440000724000202849140072400020340004902400000047000000',\n);\n\nexport function recoverSigner(signer: string, tx_id: string) {\n  if (tx_id == '0x') return;\n\n  const a = Signer.recoverAddress(hashMessage(tx_id), signer);\n  return a ? a.toString() : defaultValues['address'];\n}\n","import { BN, Coin, Resource, bn } from 'fuels';\nimport { assets } from '../../test/mocks';\nimport {\n  IAssetGroupById,\n  IAssetGroupByTo,\n  IAssetTransaction,\n  ITransferAsset,\n} from './types';\n\nexport class Asset {\n  /**\n   *  Asset: provides utils to organize assets\n   */\n\n  public static async assetsGroupById(list: ITransferAsset[]) {\n    /**\n     * Groupe assest by id\n     *\n     * @param ITransferAsset[] - An array of assets to transfer.\n     * @returns An object with n unique keys, each key being an asset and the value of each key is equivalent to the sum of the equivalent assets received.\n     */\n    return list.reduce((acc: IAssetGroupById, asset: ITransferAsset) => {\n      const { assetId, amount }: { assetId: string; amount: string } = asset;\n\n      if (!acc[assetId]) {\n        acc[assetId] = bn.parseUnits(amount);\n      } else {\n        acc[assetId] = acc[assetId].add(bn.parseUnits(amount));\n      }\n\n      return acc;\n    }, {});\n  }\n  public static async assetsGroupByTo(list: ITransferAsset[]) {\n    /**\n     * Group assets by transaction destination\n     *\n     * @param ITransferAsset[] - An array of assets to transfer.\n     * @returns An object with n unique keys, each key being a destination address and the value of each key is equivalent to the sum of the equivalent assets received.\n     */\n\n    return list.reduce((acc: IAssetGroupByTo, asset: ITransferAsset) => {\n      const { to, amount, assetId }: ITransferAsset = asset;\n      const key = `${to}${assetId}`;\n      if (!acc[key]) {\n        acc[key] = {\n          assetId,\n          amount: bn.parseUnits(amount),\n          to,\n        };\n      } else {\n        acc[key].amount.add(bn.parseUnits(amount));\n      }\n      return acc;\n    }, {}) as IAssetGroupByTo;\n  }\n\n  public static async addTransactionFee(_assets: IAssetGroupById, _fee: BN) {\n    /**\n     * Checks if there is an eth asset in the transaction to pay for the gas and inserts a minimum amount\n     *\n     * @param _fee - value in BN to add on amount of eth of transaction\n     * @param assets - group of assets to sended of transaction\n     * @returns An object with n unique keys, each key being a destination address and the value of each key is equivalent to the sum of the equivalent assets received.\n     */\n\n    let _assets_aux = _assets;\n    let containETH = !!_assets_aux[assets['ETH']];\n\n    if (containETH) {\n      let value = bn(_fee).add(_assets_aux[assets['ETH']]);\n      _assets_aux[assets['ETH']] = value;\n    } else {\n      _assets_aux[assets['ETH']] = bn().add(_fee);\n    }\n\n    return Object.entries(_assets_aux).map(([key, value]) => {\n      return {\n        amount: value,\n        assetId: key,\n      };\n    });\n  }\n\n  public static includeSpecificAmount(\n    predicateCoins: Resource[],\n    assets: ITransferAsset[],\n  ): IAssetTransaction[] {\n    return assets.map((asset: ITransferAsset) => {\n      const predicateCoin: Coin = predicateCoins.find(\n        (coin: Resource) => coin,\n      ) as Coin;\n      if (predicateCoin) {\n        return {\n          ...asset,\n          utxo: predicateCoin.id,\n        };\n      } else {\n        return {\n          ...asset,\n          onPredicate: '',\n          utxo: '',\n        };\n      }\n    });\n  }\n}\n","import { assets } from '../../test/mocks';\nimport { IAsset } from './types';\nconst assetsList: IAsset[] = [\n  {\n    name: 'Etherum',\n    slug: 'ETH',\n    assetId: assets['ETH'],\n  },\n  {\n    name: 'Dai',\n    slug: 'DAI',\n    assetId: assets['DAI'],\n  },\n  {\n    name: 'sEther',\n    slug: 'sETH',\n    assetId: assets['sETH'],\n  },\n];\n\nexport { assetsList };\n",""]}