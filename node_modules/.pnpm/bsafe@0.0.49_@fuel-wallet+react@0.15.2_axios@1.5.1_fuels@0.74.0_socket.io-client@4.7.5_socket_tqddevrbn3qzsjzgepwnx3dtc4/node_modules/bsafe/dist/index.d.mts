import * as fuels from 'fuels';
import { Provider, Predicate, BigNumberish, BN, Resource, TransactionRequest, Operation, TransactionRequestLike, ScriptTransactionRequest, TransactionStatus as TransactionStatus$1, TransactionResponse, BytesLike, FuelConnector, FuelConnectorEventTypes, Asset as Asset$1, JsonAbi } from 'fuels';
import { FuelWalletLocked } from '@fuel-wallet/sdk';

type PredicateAbiConfigurables = {
    SIGNERS: [string, string, string, string, string, string, string, string, string, string];
    SIGNATURES_COUNT: BigNumberish;
    HASH_PREDICATE: string;
};
declare class PredicateAbi__factory {
    static readonly abi: {
        types: ({
            typeId: number;
            type: string;
            components: {
                name: string;
                type: number;
                typeArguments: null;
            }[];
            typeParameters: null;
        } | {
            typeId: number;
            type: string;
            components: null;
            typeParameters: null;
        })[];
        functions: {
            inputs: never[];
            name: string;
            output: {
                name: string;
                type: number;
                typeArguments: null;
            };
            attributes: null;
        }[];
        loggedTypes: never[];
        messagesTypes: never[];
        configurables: {
            name: string;
            configurableType: {
                name: string;
                type: number;
                typeArguments: null;
            };
            offset: number;
        }[];
    };
    static readonly bin = "0x740000034700000000000000000012fc5dfcc00110fff3001aec500091000f781a4000005d47f00a264400001a6870005047b87072480020284504805d43f00a286914005d43f00b264000001a6070001a6c00001a5000005d67f00b5d43f00a1641b400764002d16140000113450000764400061341004076400001360000005043ba901a401000740000025043ba901a400000134500007644000613410040764000025d43f00c36400000615c010574000001615c00075043bb785d47f03f1045130072480020284114805047bbd85d4bf03f10492300724c0020284524c0a1410460134100001a5800001a540000764002ad164165c0764000065d43f01115415400764000025d43f0111341540024400000614d64015043b6d072440090284134405d43b0da13410000764000e9614164015047b9501ae900001ae5100020f8330058fbe00250fbe0047400037e1a43d0005047be807248004028450480506bbe801a400000264000001a6c7000134140001a70000076400020134000007640001a107005001541c0007640000174000008267000001a4470001540000076400001740000021a4000002845b4001a6d10001a48000016412500764000031a400000264000007400000c1a4000001041b40010410480104584805c4510005e411000104920407500000b1a400000264000001a7140001a6d80005d43f040104103005d47f04010451300504bbe60724c0020284904c05043be604241b700504bbed0724c0020284904c05043bed0724800201b480480104bb480724c0020284914c0724800201b481480104bb480724c0020284914c05047b420724800402847b480504bbe00724c0040284914c05047be00504bb040724c00402849a4c0504fb6b072680020284d06803e4524c01a408000134100407640000a5043b5e85fec00bd5047be0050490008724c0040284914c0504bbae07244004828490440740000065043b3d85fec107b5fec0083504bbae072440048284904405043bd3872440048284124405043b76072440048284124405d43b15c13410040764000365043bd385047b81872480048284504805d43b1a71341000076400001360000005043b818504100085047bce872480040284504805043bce8724400201b440440104504405043bce8724800201b481480104904805043b4a0724c0020284114c050450020724c0020284524c05047ba4072480040284504805043b9b01ae910001ae5000020f8330058fbe00250fbe004740003061a43d0005047bc3872480020284504805043b5685fec00ad5047bc38504bb0c0724c0020284914c050450008724c0020284524c0504bbb2872440028284904407400000a5043b760504100405047b3a05fec107450491020724c0008284904c0504bbb2872400028284914005d43f041104103005047b7a8724c0028284524c05d47b16513451000504fbb5072480020284d048076440001740000095043b7a8504100085047bd8072480020284504805043bd80504fbb5072440020284d04405043be4072440020284134405043be401a6c00005d47f0121645b4401a48000076440001740000135047b2605d4bf04210492300724c0140284524c0724800201b49b480104914805047bbb8724c0020284504c0504fbc1872680020284d2680a14514e01a48100076440002106db04075000016105554805043bb70740001b35043b6d0504100085047bef072480088284504805d43f03b104134005d47b1e6504bb8b01ae900001ae510001ae1200020f8330058fbe00250fbe004740002031a47d000504bbd28724c0010284914c05047bd28504bb630724c0010284914c05d692001504bb640724c0010284914c05d6d20005d47b1e61b441440104504405d4bb1e7504fb8c01ae910001ae520001ae1300020f8330058fbe00250fbe004740001ea1a47d000504bbec0724c0010284914c05047bec0504bb650724c0010284914c05d712001504bb660724c0010284914c05d7520005d47b1e61b441440104104405d47b1e71b441440104104405d47b1e8504bb8d01ae900001ae510001ae1200020f8330058fbe00250fbe004740001ce1a43d0005047bc5872480010284504805043bc585047b67072480010284504805d7910015047b68072480010284504805d7d10005043b9201ae9000020f8330058fbe00250fbe0047400022b1a43d0005d8100005d4500015d8500021341a00076400021134210007640001a10421680154904407648000174000007264000001a487000154d1000764c000174000001284a04401a8120001a4c000016453680764400051a440000264400001a8500001a4500007400000c10460840104514c01049b4c05c4920005e452000104d30407500000c1a400000264000001a85a0001a45a0001a81b0001341400076400021134210007640001a10421500154904407648000174000007264000001a487000154d1000764c000174000001284a04401a8120001a4c000016453500764400051a440000264400001a8500001a4500007400000c10460840104514c0104984c05c4920005e452000104d30407500000c1a400000264000001a8540001a4590001a8180001341c00076400021134210007640001a10421700154904407648000174000007264000001a487000154d1000764c000174000001284a04401a8120001a4c000016453700764400051a440000264400001a8500001a4500007400000c10460840104514c01049d4c05c4920005e452000104d30407500000c1a400000264000001a85c0001a45c0001a81d0005043b9d05fee013a5fed113b5fee113c5047b8e01ae900001ae5100020f8330058fbe00250fbe004740001611a43d0005047bc6872480020284504805043b9381ae9000020f8330058fbe00250fbe004740001a91a43d0005d6900005d7100015d6d00021341e000764000211341b0007640001a1041b780154507007644000174000007264000001a4470001549c00076480001740000012845a7001a6910001a4c000016453780764400051a440000264400001a6d00001a7100007400000c1045a6c0104514c01049f4c05c4920005e452000104d30407500000c1a400000264000001a6de0001a71e0001a69f0005043bc685d47f00a264400001a447000504bb890724c0020284904c05d43f00a284524005d43f00a13410000764000231341b0007640001c5d43f00a1041b400154907007648000174000007264000001a487000154dc000764c0001740000012849a7001a6920001a7000005d4bf00a1649c480764800051a440000264400001a6d00001a7100007400000c1049a6c010492700104d17005c4d30005e4930001071c0407500000d1a400000264000005d6ff00a5d73f00a1a6910005d43f040104103005047b9e85feda13d5fedc13e5fedb13f504bb9001ae910001ae5200020f8330058fbe00250fbe004740000f41a47d000504bbc88724c0020284914c05047bef0504bbc88504fb080726800201b68068010693680726c0020286906c0726800201b68168010693680726c0020286906c05043b4607268004028413680504fbdc072680040284d06805043bdc0504fb0e072680040284d16805047b69072680020284526803f4134401a408000134100407640000a5043b5a05fec00b45047bdc050490008724c0040284914c0504bba987244004828490440740000065043b4e05fec109c5fec00a4504bba9872440048284904405043b7d072440048284124405d43b1531341000076400001360000005043b7d0504100085047bca872480040284504805043bca8724400201b440440104504405043bca8724800201b481480104904805043b528724c0020284114c050450020724c0020284524c05047ba0072480040284504805043b9901ae910001ae5000020f8330058fbe00250fbe004740001231a43d0005047bda072480020284504805043bda01a6c00005d47f0121645b4401a48000076440001740000135047b1205d4bf04210492300724c0140284524c0724800201b49b480104914805047bb98724c0020284504c0504fbbf872680020284d2680a14514e01a48100076440002106db04075000016105554805043bb7010596040750002ab240000005d43f00a164106c0764000025d43f00a134106c07640000a1041a6c05047b5905fec10b25c4100005049100f5e490000504bba807240001028491400740000055043b3c85fec0079504bba8072440010284904405043b86072440010284124405d43b1501341004076400001360000005043b8605041000f5c4100005d47f043104513005d4bf03c1f490480724c00011b4924c0104914805c452000134946407648000174000010134990001a4c1000764800025d4bf03d1b4d2640154936407648000174000007264c00001a487000155590007654000174000001284986401a6120001a653000104985005e491000104540405d4bf043104923005c4ff1f0114104c0724c00011b4104c0104124005c410000134916407648000174000010134990001a4c1000764800025d4bf03d1b4d2640154936407648000174000007264c00001a487000155190007650000174000001284986401a6120001a653000104984405e49000010511040106db0407500032f1af05000910000285ff100005ff110015ff120025ff130035ff3b0041aec5000910000101a43a0001a4790001a4b80001a4fe0001b4510405fed00005fed10011a43b00072440010284904401af52000920000101af9300059f050285d43c0005d47c0015d4bc0025d4fc0035defc004920000284af800001af05000910000505ff100005ff110015ff120025ff130035ff140045ff150055ff160065ff170075ff180085ff3b0091aec5000910000201a43a0001a4790001a4be0001a4c0000264c00001a4c70005d5100005d5500025d410002134100001a58000076400020134000007640001a10580540154160007640000174000008265800001a407000155c0000765c0001740000021a5c0000284135c01a4d00001a60000016418540764000031a400000264000007400000c1a4000001041340010410600105d46005c5d70005e417000106180407500000b1a400000264000001a5950001a4d40005d43f040104103007250002028ed05001a43b00042413580724c0020284504c01af51000920000201af9200059f050505d43c0005d47c0015d4bc0025d4fc0035d53c0045d57c0055d5bc0065d5fc0075d63c0085defc009920000504af800001af05000910000205ff100005ff110015ff120025ff3b0031aec5000910000001a43a0001a47e0001a480000264800001a4870005f4120005f4000015f4000021af50000920000001af9100059f050205d43c0005d47c0015d4bc0025defc003920000204af800001af05000910000285ff100005ff110015ff120025ff130035ff3b0041aec5000910000001a43a0001a4790001a4be000724c0040284504c01af51000920000001af9200059f050285d43c0005d47c0015d4bc0025d4fc0035defc004920000284af800001af05000910000385ff100005ff110015ff120025ff130035ff140045ff150055ff3b0061aec5000910000781a43a0001a4b90001a4fe0005d47f040104513001a500000265000001a5070005fed40085fec00095fec000a5053b0407254004028ed05401aebb0001ae5400020f8330058fbe00250fbe004740000165043b05872500020284115005053b0585d43b0085d47b00a4251044072400020284944001af52000920000781af9300059f050385d43c0005d47c0015d4bc0025d4fc0035d53c0045d57c0055defc006920000384af800001af05000910000585ff100005ff110015ff120025ff130035ff140045ff150055ff160065ff170075ff180085ff190095ff3b00a1aec5000910000401a43a0001a6790001a63e0005d47f00a264400001a4470007248002028ed04801a4bb0005d4d20005d5120015d5520025d4920035f4530005f4540015f4550025f4520035d4bf00a134920007648002c5d49900213492000764800225d4990025d4ff00a104924c05d4d90025d5190005d559001155925407658000174000007264800001a587000155d5000765c000174000001285945401a5160005f6540001a5800005d53f00a16516500765000055f6520015f6520021a440000264400007400000f5d519000105144c010514580105515805c5550005e515000105960407500000e5f6510005d47f00a5f6510015d47f00a5f6510021a44000026440000504100205d47f00a264400001a447000504bb020724c0020284904c05d4120005d4d20015d5120025d4920035f4500005f4530015f4540025f4520035d43f00a134100007640002c5d41900213410000764000225d4190025d4bf00a104104805d4990025d4d90005d519001155505007654000174000007264000001a547000155940007658000174000001285535001a4d50005f6530001a5400005d4ff00a164d54c0764c00055f6500015f6500021a400000264000007400000f5d4d9000104d3480104d3540105115405c5140005e4d4000105550407500000e5f6510005d43f00a5f6500015d43f00a5f6500021a400000264000001af40000920000401af9800059f050585d43c0005d47c0015d4bc0025d4fc0035d53c0045d57c0055d5bc0065d5fc0075d63c0085d67c0095defc00a920000584af8000047000000111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000003031323334353637383961626364656600000000000000200000000000000040cccccccccccc000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000400000000000000020f000000000000000000000000001364000000000000131c00000000000012fc0000000000001394000000000000133c";
    static createInstance(provider: Provider, configurables?: PredicateAbiConfigurables): Predicate<fuels.InputValue<void>[]>;
}

type IAsset = {
    name: string;
    slug: string;
    assetId: string;
};
type ITransferAsset = {
    assetId: string;
    amount: string;
    to: string;
};
interface IAssetTransaction extends ITransferAsset {
    utxo: string;
}
type IAssetGroupById = {
    [name: string]: BN;
};
type IAssetGroupByTo = {
    [name: string]: {
        assetId: string;
        amount: BN;
        to: string;
    };
};

declare class Asset {
    /**
     *  Asset: provides utils to organize assets
     */
    static assetsGroupById(list: ITransferAsset[]): Promise<IAssetGroupById>;
    static assetsGroupByTo(list: ITransferAsset[]): Promise<IAssetGroupByTo>;
    static addTransactionFee(_assets: IAssetGroupById, _fee: BN): Promise<{
        amount: BN;
        assetId: string;
    }[]>;
    static includeSpecificAmount(predicateCoins: Resource[], assets: ITransferAsset[]): IAssetTransaction[];
}

declare const assetsList: IAsset[];

interface IAuthService {
    createSession: () => Promise<IBSAFEAuth | undefined>;
    signerByPk: (pk: string) => Promise<void>;
    signerByAccount: (wallet: FuelWalletLocked) => Promise<void>;
}
interface IApiConfig {
    apiUrl: string;
    authToken?: string;
    account?: string;
}
interface IBSAFEAuth {
    address: string;
    token: string;
}
interface IBSAFEAuthPayload {
    address: string;
    hash: string;
    createdAt: string;
    provider: string;
    encoder: string;
    user_id: string;
}

declare class AuthService implements IAuthService {
    private client;
    private payloadSession;
    private signature?;
    BSAFEAuth?: IBSAFEAuth;
    protected constructor(payload: IBSAFEAuthPayload);
    static create(user: string, provider: string): Promise<AuthService>;
    createSession(): Promise<IBSAFEAuth>;
    signerByPk(pk: string): Promise<void>;
    signerByAccount(wallet: FuelWalletLocked): Promise<void>;
    signTransaction(wallet: FuelWalletLocked, BSAFETransactionId: string, approve?: boolean): Promise<void>;
}

declare enum SortOption {
    ASC = "ASC",
    DESC = "DESC"
}
declare enum TransactionStatus {
    AWAIT_REQUIREMENTS = "await_requirements",
    PENDING_SENDER = "pending_sender",
    PROCESS_ON_CHAIN = "process_on_chain",
    SUCCESS = "success",
    DECLINED = "declined",
    FAILED = "failed"
}
interface ICreateTransactionPayload {
    predicateAddress: string;
    name?: string;
    hash: string;
    txData: TransactionRequest;
    status: TransactionStatus;
    assets: ITransferAsset[];
    sendTime?: Date;
    gasUsed?: string;
}
declare enum WitnessStatus {
    REJECTED = "REJECTED",
    DONE = "DONE",
    PENDING = "PENDING"
}
interface IWitnesses {
    id: string;
    signature: string;
    account: string;
    status: WitnessStatus;
    createdAt: string;
    updatedAt: string;
}
interface GetTransactionParams {
    predicateId?: string[];
    to?: string;
    hash?: string;
    status?: TransactionStatus[];
    perPage?: number;
    page?: number;
    orderBy?: string;
    sort?: SortOption;
}
declare enum TransactionProcessStatus {
    SUCCESS = "SuccessStatus",
    SQUIZED = "SqueezedOutStatus",
    SUBMITED = "SubmittedStatus",
    FAILED = "FailureStatus"
}
interface ITransactionResume {
    hash: string;
    totalSigners: number;
    requiredSigners: number;
    predicate: {
        id: string;
        address: string;
    };
    outputs: ITransferAsset[];
    status: TransactionStatus;
    witnesses?: string[];
    gasUsed?: string;
    sendTime?: Date;
}
interface ITransactionSummary {
    origin: string;
    name: string;
    image?: string;
    operations?: Operation[];
}
interface ITransaction extends ICreateTransactionPayload {
    id: string;
    name: string;
    createdAt: string;
    updatedAt: string;
    predicateId: string;
    witnesses: IWitnesses[];
    resume: ITransactionResume;
    assets: IAssetTransaction[];
    summary?: ITransactionSummary;
}
interface ITransactionService {
    create: (payload: ICreateTransactionPayload) => Promise<ITransaction>;
    findByHash: (hash: string) => Promise<ITransaction>;
    findByTransactionID: (transactionId: string) => Promise<ITransaction>;
    sign: (BSAFETransactionId: string, account: string, signer: string, approve?: boolean) => Promise<ITransaction>;
    send: (BSAFETransactionId: string) => Promise<ITransactionResume>;
    verify: (BSAFETransactionId: string) => Promise<ITransactionResume>;
}

interface IPredicatePayload {
    name: string;
    description?: string;
    predicateAddress: string;
    minSigners: number;
    addresses: string[];
    bytes: string;
    abi: string;
    configurable: string;
    provider: string;
    chainId?: number;
}
interface IListTransactions extends GetTransactionParams, Omit<GetTransactionParams, 'predicateId'> {
}
interface IPredicate extends IPredicatePayload {
    id: string;
    members: {
        id: string;
        avatar: string;
        address: string;
        nickname: string;
    }[];
    owner: {
        id: string;
        address: string;
    };
    createdAt: string;
    updatedAt: string;
}
interface IPredicateService {
    create: (payload: IPredicatePayload) => Promise<IPredicate>;
    findByAddress: (predicateAddress: string) => Promise<IPredicate>;
    findById: (predicateAddress: string) => Promise<IPredicate>;
    hasReservedCoins: (predicateAddress: string) => Promise<string[]>;
    listPredicateTransactions: (params?: GetTransactionParams) => Promise<ITransaction[]>;
}

interface IConfVault {
    HASH_PREDICATE?: number[];
    SIGNATURES_COUNT: number;
    SIGNERS: string[];
    network: string;
    chainId: number;
}
interface ITransferList {
    [id: string]: Transfer;
}
interface IInstanceNewTransfer {
    assets: ITransferAsset[];
    witnesses: string[];
}
type IBSAFEIncludeTransaction = IFormatTransfer | TransactionRequestLike;
interface IPayloadVault {
    configurable: IConfVault;
    provider: Provider;
    name?: string;
    description?: string;
    transactionRecursiveTimeout?: number;
    abi?: string;
    bytecode?: string;
    BSAFEAuth?: IBSAFEAuth;
    BSAFEVaultId?: string;
    BSAFEVault?: IPredicate;
}
interface IBSAFEApi extends IBSAFEAuth {
    id?: string;
    predicateAddress?: string;
}
interface IBSAFEGetTransactions {
    resume: ITransactionResume;
    witnesses: IWitnesses[];
}
interface IVault {
    getAbi: () => {
        [name: string]: unknown;
    };
    getBin: () => string;
    getConfigurable: () => IConfVault;
    BSAFEGetTransactions: (params?: IListTransactions) => Promise<IBSAFEGetTransactions[]>;
    BSAFEIncludeTransaction: (params: IBSAFEIncludeTransaction) => Promise<Transfer>;
}

/**
 * `Vault` are extension of predicates, to manager transactions, and sends.
 */
declare class Vault extends Predicate<[]> implements IVault {
    private bin;
    private abi;
    private api;
    private auth;
    private configurable;
    name: string;
    BSAFEVault: IPredicate;
    BSAFEVaultId: string;
    description?: string;
    transactionRecursiveTimeout: number;
    protected constructor({ configurable, provider, abi, bytecode, name, description, BSAFEVaultId, BSAFEVault, BSAFEAuth, transactionRecursiveTimeout, }: IPayloadVault);
    /**
     *
     * Validate creation parameters.
     *
     * @param configurable - The parameters of signature requirements.
     * @returns thire is no return, but if an error is detected it is trigged
     */
    private static validations;
    /**
     * Creates an instance of the Predicate class.
     *
     * @param configurable - The parameters of signature requirements.
     *      @param HASH_PREDICATE - Hash to works an unic predicate, is not required, but to instance old predicate is an number array
     *      @param SIGNATURES_COUNT - Number of signatures required of predicate
     *      @param SIGNERS - Array string of predicate signers
     * @param abi - The JSON abi to BSAFE multisig.
     * @param bytecode - The binary code of preficate BSAFE multisig.
     * @param transactionRecursiveTimeout - The time to refetch transaction on BSAFE API.
     * @param BSAFEAuth - The auth to BSAFE API.
     *
     * @returns an instance of Vault
     **/
    static create(params: IPayloadVault | IBSAFEApi): Promise<Vault>;
    /**
     * To use bsafe API, auth is required
     *
     * @returns if auth is not defined, throw an error
     */
    private verifyAuth;
    /**
     * Send a caller to BSAFE API to save predicate
     * Set BSAFEVaultId and BSAFEVault
     *
     *
     * @returns if auth is not defined, throw an error
     */
    private createOnService;
    /**
     * Make configurable of predicate
     *
     * @param configurable - The parameters of signature requirements.
     * @returns an formatted object to instance a new predicate
     */
    private static makePredicate;
    /**
     * Include new transaction to vault
     *
     * @param {IFormatTransfer} param - IFormatTransaction or TransactionRequestLike
     * @param {TransactionRequestLike} param - IFormatTransaction or TransactionRequestLike
     * @returns return a new Transfer instance
     */
    BSAFEIncludeTransaction(param: IBSAFEIncludeTransaction): Promise<Transfer>;
    /**
     * Return an list of transaction of this vault
     *
     * @returns an transaction list
     *
     * TODO:
     * return a complete transaction, without instance
     * implement default pagintation ({perPage: 10, page: 1, orderBy: 'createdAt', order: 'DESC'})
     */
    BSAFEGetTransactions(params?: IListTransactions): Promise<{
        resume: ITransactionResume;
        witnesses: IWitnesses[];
    }[]>;
    /**
     * Return an list of transaction of this vault
     * @param transactionId - The transaction id on BSAFEApi
     *
     * @returns an transaction list
     *
     *
     * TODO:
     * split this function in others:
     * - create a class extended of TransactionRequest, and implement the save in BSAFEApi method
     *
     * - newTransaction -> (IPayload) => TransactionRequest
     *
     * - BSAFETransaction -> (TransactionRequest | string[bsafeId, hash]) => TransactionRequest
     *       - Save the transaction in BSAFEApi if it is of type TransactionRequest
     *       - If the vault has not been instantiated with the Auth, it doesn't save in BSAFEApi
     *       - If it receives a string, it fetches from the API and returns the TransactionRequest
     */
    BSAFEGetTransaction(transactionId: string): Promise<Transfer>;
    /**
     * Return abi of this vault
     *
     * @returns an abi
     */
    getAbi(): {
        [name: string]: unknown;
    };
    /**
     * Return binary of this vault
     *
     * @returns an binary
     */
    getBin(): string;
    /**
     * Return this vault configurables state
     *
     * @returns configurables [signers, signers requested, hash]
     */
    getConfigurable(): IConfVault;
}

declare const defaultValues: {
    [name: string]: string;
};
declare const makeHashPredicate: () => string;
declare const makeSubscribers: (subscribers: string[]) => string[];

interface TransferConstructor {
    name: string;
    service?: ITransactionService;
    witnesses: string[];
    transactionRequest: TransactionRequest;
    BSAFEScript: ScriptTransactionRequest;
    BSAFETransaction?: ITransaction;
    BSAFETransactionId?: string;
    vault: Vault;
}
type TransferFactoryParam = string | IFormatTransfer | TransactionRequestLike | ITransaction;
interface TransferFactory {
    auth?: IBSAFEAuth;
    transfer: TransferFactoryParam;
    vault: Vault;
    isSave?: boolean;
}
interface IPayloadTransfer {
    assets: ITransferAsset[];
    witnesses?: string[];
    name?: string;
}
interface IFormatTransfer {
    name: string;
    assets: ITransferAsset[];
    witnesses?: string[];
}
interface IInstanceTransfer {
    txData: TransactionRequest;
    hash: string;
}
interface IRequiredWitnesses {
    required: number;
    signed: number;
    witnesses: IWitnesses[];
}
interface ITransferResult {
    status: TransactionStatus$1;
    block?: string;
    witnesses?: string[];
    outputs?: ITransferAsset[];
    bsafeID?: string;
    fee?: string;
    gasUsed?: string;
}
interface ISendTransaction {
    status: string;
    block: string;
    gasUsed: string;
}
declare enum TransferInstanceError {
    REQUIRED_AUTH = "Required credentials",
    INVALID_PARAMETER = "Invalid instance parameters"
}
interface ITransfer {
    send(): void;
    getScript(): TransactionRequest;
    wait(): Promise<ITransactionResume | undefined>;
    getAssets(): ITransferAsset[];
}

/**
 * `Transfer` are extension of ScriptTransactionRequest, to create and send transactions
 */
declare class Transfer {
    name: string;
    witnesses: string[];
    BSAFEScript: ScriptTransactionRequest;
    BSAFETransaction: ITransaction;
    transactionRequest: TransactionRequest;
    BSAFETransactionId: string;
    private vault;
    private service?;
    protected constructor({ vault, name, witnesses, transactionRequest, BSAFEScript, service, BSAFETransaction, BSAFETransactionId, }: TransferConstructor);
    /**
     * Create a new transaction instance
     *
     * @param {TransferFactory} param - TransferFactory params
     *        @param {string | ITransfer | ITransaction} transfer - Transaction ID or ITransfer or ITransaction
     *        @param {IBSAFEAuth} auth - BSAFEAuth instance
     *        @param {Vault} vault - Vault instance
     *        @param {boolean} isSave - Save transaction on BSAFEAPI
     * @returns return a new Transfer instance
     */
    static instance({ transfer, auth, vault, isSave, }: TransferFactory): Promise<Transfer>;
    /**
     * Create the url to consult the fuel block explorer
     *
     * @returns link of transaction block
     */
    makeBlockUrl(block: string | undefined): string;
    /**
     * Generates and formats the transaction hash of transaction instance
     *
     * @returns Hash of this transaction
     */
    getHashTxId(): string;
    /**
     * Configure outputs and parameters of transaction instance.
     *
     * @returns this transaction configured and your hash
     */
    private static formatTransaction;
    /**
     * Using BSAFEauth or default send of predicate, send this transaction to chain
     *
     * @returns an resume for transaction
     */
    send(): Promise<ITransactionResume | TransactionResponse | {
        bsafeID: string;
        hash: string;
        totalSigners: number;
        requiredSigners: number;
        predicate: {
            id: string;
            address: string;
        };
        outputs: ITransferAsset[];
        status: TransactionStatus;
        witnesses?: string[] | undefined;
        gasUsed?: string | undefined;
        sendTime?: Date | undefined;
    }>;
    /**
     * Promise to return result of function
     *
     * todo: monitore send with an socket server
     * Connect to api socket using name: [TRANSACTION_WAIT]:${transactionId}
     * Await an message on event [TRANSACTION_WAIT]:${transactionId}
     * and resolves a promise returns a result (returned on content of message)
     *
     * @returns an resume for transaction
     */
    wait(): Promise<ITransactionResume>;
}

interface BSAFEScriptTransactionConstructor {
    gasPrice: BN;
    gasLimit: BN;
    script: BytesLike;
}
declare class BSAFEScriptTransaction extends ScriptTransactionRequest {
    constructor({ script, gasLimit, gasPrice }?: BSAFEScriptTransactionConstructor);
    instanceTransaction(_coins: Resource[], vault: Predicate<[]>, outputs: IAssetGroupByTo, witnesses?: string[]): Promise<void>;
}

declare const transactionScript: Uint8Array;
declare function recoverSigner(signer: string, tx_id: string): string | undefined;

declare const accounts: {
    FULL: {
        account: string;
        address: string;
        privateKey: string;
    };
    STORE: {
        account: string;
        address: string;
        privateKey: string;
    };
    USER_1: {
        account: string;
        address: string;
        privateKey: string;
    };
    USER_2: {
        account: string;
        address: string;
        privateKey: string;
    };
    USER_3: {
        account: string;
        address: string;
        privateKey: string;
    };
    USER_4: {
        account: string;
        address: string;
        privateKey: string;
    };
    USER_5: {
        account: string;
        address: string;
        privateKey: string;
    };
};
type IDefaultAccount = {
    address: string;
    account?: string;
    privateKey?: string;
};

declare const defaultConfig: {
    PROVIDER: string | undefined;
    API_URL: string | undefined;
    BSAFE_URL: string | undefined;
    ENCODER: string | undefined;
    GAS_PRICE: string | undefined;
    GAS_LIMIT: string | undefined;
    REFETCH_TIMEOUT: string | undefined;
};
type DefaultConfigurables = typeof defaultConfig;
declare const BSafe: {
    setup: (params: Partial<DefaultConfigurables>) => void;
};

declare enum BSAFEConnectorEvents {
    ACCOUNTS = "accounts",
    CURRENT_ACCOUNT = "currentAccount",
    TRANSACTION_CREATED = "[TRANSACTION_CREATED]",
    TRANSACTION_SEND = "[TRANSACTION_SEND]",
    AUTH_CONFIRMED = "[AUTH_CONFIRMED]",
    AUTH_REJECTED = "[AUTH_REJECTED]",
    AUTH_DISCONECT_DAPP = "[AUTH_DISCONECT_DAPP]",
    AUTH_DISCONECT_CONFIRM = "[AUTH_DISCONECT_CONFIRM]",
    CONNECTION = "connection",
    POPUP_TRANSFER = "[POPUP_TRANSFER]_connected",
    CONNECTED_NETWORK = "[CONNECTED_NETWORK]",
    DEFAULT = "message"
}

type FuelABI = JsonAbi;
type Network = {
    url: string;
    chainId: number;
};
declare class BSafeConnector extends FuelConnector {
    name: string;
    metadata: {
        image: {
            light: string;
            dark: string;
        };
        install: {
            action: string;
            link: string;
            description: string;
        };
    };
    installed: boolean;
    connected: boolean;
    events: {
        ACCOUNTS: BSAFEConnectorEvents.ACCOUNTS;
        CURRENT_ACCOUNT: BSAFEConnectorEvents.CURRENT_ACCOUNT;
        TRANSACTION_CREATED: BSAFEConnectorEvents.TRANSACTION_CREATED;
        TRANSACTION_SEND: BSAFEConnectorEvents.TRANSACTION_SEND;
        AUTH_CONFIRMED: BSAFEConnectorEvents.AUTH_CONFIRMED;
        AUTH_REJECTED: BSAFEConnectorEvents.AUTH_REJECTED;
        AUTH_DISCONECT_DAPP: BSAFEConnectorEvents.AUTH_DISCONECT_DAPP;
        AUTH_DISCONECT_CONFIRM: BSAFEConnectorEvents.AUTH_DISCONECT_CONFIRM;
        CONNECTION: BSAFEConnectorEvents.CONNECTION;
        POPUP_TRANSFER: BSAFEConnectorEvents.POPUP_TRANSFER;
        CONNECTED_NETWORK: BSAFEConnectorEvents.CONNECTED_NETWORK;
        DEFAULT: BSAFEConnectorEvents.DEFAULT;
        connectors: FuelConnectorEventTypes.connectors;
        currentConnector: FuelConnectorEventTypes.currentConnector;
        connection: FuelConnectorEventTypes.connection;
        accounts: FuelConnectorEventTypes.accounts;
        currentAccount: FuelConnectorEventTypes.currentAccount;
        networks: FuelConnectorEventTypes.networks;
        currentNetwork: FuelConnectorEventTypes.currentNetwork;
        assets: FuelConnectorEventTypes.assets;
        abis: FuelConnectorEventTypes.abis;
    };
    private readonly socket;
    private readonly sessionId;
    private readonly api;
    private dAppWindow;
    constructor();
    connect(): Promise<boolean>;
    sendTransaction(_address: string, _transaction: TransactionRequestLike): Promise<string>;
    ping(): Promise<boolean>;
    version(): Promise<{
        app: string;
        network: string;
    }>;
    isConnected(): Promise<any>;
    accounts(): Promise<any>;
    currentAccount(): Promise<any>;
    disconnect(): Promise<boolean>;
    currentNetwork(): Promise<any>;
    assets(): Promise<Asset$1[]>;
    signMessage(address: string, message: string): Promise<string>;
    addAssets(assets: Asset$1[]): Promise<boolean>;
    addAsset(assets: Asset$1): Promise<boolean>;
    addNetwork(networkUrl: string): Promise<boolean>;
    selectNetwork(network: Network): Promise<boolean>;
    networks(): Promise<Array<Network>>;
    addABI(contractId: string, abi: FuelABI): Promise<boolean>;
    getABI(id: string): Promise<FuelABI | null>;
    hasABI(id: string): Promise<boolean>;
}

export { Asset, AuthService, BSAFEConnectorEvents, BSAFEScriptTransaction, BSafe, BSafeConnector, type GetTransactionParams, type IApiConfig, type IAsset, type IAssetGroupById, type IAssetGroupByTo, type IAssetTransaction, type IAuthService, type IBSAFEApi, type IBSAFEAuth, type IBSAFEAuthPayload, type IBSAFEGetTransactions, type IBSAFEIncludeTransaction, type IConfVault, type ICreateTransactionPayload, type IDefaultAccount, type IFormatTransfer, type IInstanceNewTransfer, type IInstanceTransfer, type IListTransactions, type IPayloadTransfer, type IPayloadVault, type IPredicate, type IPredicatePayload, type IPredicateService, type IRequiredWitnesses, type ISendTransaction, type ITransaction, type ITransactionResume, type ITransactionService, type ITransactionSummary, type ITransfer, type ITransferAsset, type ITransferList, type ITransferResult, type IVault, type IWitnesses, PredicateAbi__factory, SortOption, TransactionProcessStatus, TransactionStatus, Transfer, type TransferConstructor, type TransferFactory, type TransferFactoryParam, TransferInstanceError, Vault, WitnessStatus, accounts, assetsList, defaultConfig, defaultValues, makeHashPredicate, makeSubscribers, recoverSigner, transactionScript };
